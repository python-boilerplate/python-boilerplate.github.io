{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Boilerplate","text":"<p>A collection of modern Python project templates with pre-configured development tools, CI/CD pipelines, and best practices.</p>"},{"location":"#overview","title":"Overview","text":"<p>Python Boilerplate is a curated collection of project templates designed to help developers quickly bootstrap new Python projects with industry best practices and modern tooling already configured.</p> <p>\u2728 Why Use These Templates?</p> <ul> <li>\u26a1 Fast Setup - Get a production-ready project structure in seconds</li> <li>\ud83d\udee0\ufe0f Modern Tooling - Pre-configured linters, formatters, type checkers, and testing frameworks</li> <li>\ud83d\ude80 CI/CD Ready - Automated workflows for GitHub Actions</li> <li>\ud83d\udc33 Docker Support - Development and production containerization</li> <li>\ud83d\udcda Documentation - MkDocs integration with Material theme</li> <li>\ud83d\udd27 Developer Experience - Pre-commit hooks, Makefile automation, and dev containers</li> </ul>"},{"location":"#available-templates","title":"Available Templates","text":""},{"location":"#uv-template","title":"\ud83d\ude80 UV Template","text":"<p>Modern Python project template using uv - the ultra-fast Python package manager.</p> <p>Repository &amp; Documentation</p> <p>\ud83d\udcc2 uv-template | \ud83d\udcd6 Documentation</p> <p>\ud83c\udfaf Core Features</p> <ul> <li>\ud83d\udc0d Python 3.10+ - Modern Python version support</li> <li>\u26a1 uv - Ultra-fast Python project manager with dependency installer and lock file support</li> <li>\ud83d\udc33 Docker Support - Multi-stage Dockerfiles for easy local development and clean production containers</li> <li>\ud83d\udd04 GitHub Actions CI/CD - Automated linting, testing, static analysis, and security checks for every branch</li> <li>\ud83d\udcbb Dev Containers - Ready-to-use development environment in GitHub Codespaces or VSCode Remote Containers</li> </ul> <p>\ud83d\udee0\ufe0f Code Quality Tools</p> <ul> <li>\ud83d\udd0d Ruff - Built-in linting and formatting</li> <li>\ud83d\udd0e MyPy - Static type checking</li> <li>\ud83e\uddea Pytest - Testing framework with async support</li> <li>\ud83d\udcca Vermin - Minimum Python version analysis</li> </ul> <p>\u2699\ufe0f Developer Experience</p> <ul> <li>\ud83c\udfa3 Pre-commit Hooks - Runs linters, formatting, and tests automatically before every commit</li> <li>\ud83d\udcdd Commitizen - Standardized commit messages with automated versioning and changelog updates</li> <li>\ud83c\udf0d Environment Management - Stage-based environment variable configuration for dev/prod with switching via <code>APP_STAGE</code></li> <li>\ud83d\udcd6 MkDocs Documentation - Project documentation generated with MkDocs and the Material theme</li> <li>\ud83d\udd27 Makefile Automation - Common tasks available as simple Makefile commands</li> </ul>"},{"location":"#poetry-template","title":"\ud83d\udce6 Poetry Template","text":"<p>Classic Python project template using Poetry for dependency management.</p> <p>Repository &amp; Documentation</p> <p>\ud83d\udcc2 poetry-template | \ud83d\udcd6 Documentation</p> <p>\ud83c\udfaf Core Features</p> <ul> <li>\ud83d\udc0d Python 3.10+ - Modern Python version support</li> <li>\ud83d\udce6 Poetry - Mature dependency management with lock files</li> <li>\ud83d\udc33 Docker Support - Containerization for development and production</li> <li>\ud83d\udd04 CI/CD Pipelines - Automated quality checks and deployment workflows</li> <li>\ud83d\udcda Structured Documentation - Well-organized project documentation</li> </ul> <p>\ud83d\udee0\ufe0f Code Quality Tools</p> <ul> <li>\ud83d\udd0d Ruff - Built-in linting and formatting</li> <li>\ud83d\udd0e MyPy - Static type checking</li> <li>\ud83e\uddea Pytest - Testing framework with async support</li> <li>\ud83d\udcca Vermin - Minimum Python version analysis</li> </ul> <p>\u2699\ufe0f Developer Experience</p> <ul> <li>\ud83c\udfa3 Pre-commit Hooks - Runs linters, formatting, and tests automatically before every commit</li> <li>\ud83d\udcdd Commitizen - Standardized commit messages with automated versioning and changelog updates</li> <li>\ud83c\udf0d Environment Management - Stage-based environment variable configuration for dev/prod with switching via <code>APP_STAGE</code></li> <li>\ud83d\udcd6 MkDocs Documentation - Project documentation generated with MkDocs and the Material theme</li> <li>\ud83d\udd27 Makefile Automation - Common tasks available as simple Makefile commands</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Getting Started</p> <ol> <li>Choose your template from the list above</li> <li>Use as GitHub Template - Click \"Use this template\" button on the repository page</li> <li>Clone your new repository <pre><code>git clone https://github.com/your-username/your-project-name.git\ncd your-project-name\n</code></pre></li> <li>Initialize the project <pre><code>make init\n</code></pre></li> <li>Start developing! \ud83c\udf89</li> </ol>"},{"location":"#templates-comparison","title":"Templates Comparison","text":"Feature UV Template Poetry Template Package Manager uv (ultra-fast) Poetry (mature) Dependency Locking \u2705 uv.lock \u2705 poetry.lock Python Version Management \u2705 Built-in \u274c External tool needed Speed \u26a1 Fastest \ud83d\udc0c Slower Ecosystem Maturity \ud83c\udd95 New but growing \ud83c\udfc6 Well-established Learning Curve \ud83d\udcc8 Minimal \ud83d\udcca Moderate"},{"location":"#useful-links","title":"Useful Links","text":"<p>Documentation &amp; Resources</p> <ul> <li>GitHub Organization - All templates and repositories</li> <li>UV Template Docs - Complete uv template documentation</li> <li>Poetry Template Docs - Complete poetry template documentation</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Want to Contribute?</p> <p>We welcome contributions! If you have ideas for improvements or new templates:</p> <ol> <li>Open an issue to discuss your idea</li> <li>Fork the repository and make your changes</li> <li>Submit a pull request with a clear description</li> </ol>"},{"location":"#support","title":"Support","text":"<p>Need Help?</p> <ul> <li>\ud83d\udccb Issues - Report bugs or request features in the specific template repository</li> <li>\ud83d\udcac Discussions - Ask questions in GitHub Discussions</li> <li>\ud83d\udce7 Contact - Reach out to @monok8i</li> </ul> <p>License</p> <p>All templates are released under the MIT License.</p> <p>Made with \u2764\ufe0f by @monok8i</p> <p>\u2b50 Follow the Organization \u2022 \ud83d\udccb Browse Templates \u2022 \ud83d\udcac Join Discussions</p>"},{"location":"poetry-template/","title":"Overview","text":"Poetry Template  <p>A comprehensive template for quickly starting new Python projects with modern development tools and best practices.</p> <p> </p>"},{"location":"poetry-template/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Python 3.10+</li> <li>uv \u2014 Ultra-fast Python package installer and dependency resolver</li> <li>Docker Support \u2014 Multi-stage Dockerfiles for both local development and clean production containers</li> <li>GitHub Actions CI/CD \u2014 Automated pipelines for code quality checks, testing, security scanning, and Python compatibility validation</li> <li>Dev Containers \u2014 Pre-configured development environment for codespaces or remote development</li> <li>Code Quality Tools \u2014 Integrated linting and formatting with Ruff, static type checking with MyPy, comprehensive testing with Pytest and checking minimal Python version to run your code (without dependencies) with Vermin</li> <li>Pre-commit Hooks \u2014 Automated code quality enforcement (linting, formatting, and tests before every commit)</li> <li>Commitizen \u2014 Standardized commit messages and automated changelog/versioning</li> <li>Environment Management \u2014 Stage-based configuration system supporting development and production environments</li> <li>MkDocs Documentation \u2014 Documentation with Material theme and automated generation</li> <li>Makefile Automation \u2014 Simplified command interface for common development tasks</li> </ul>"},{"location":"poetry-template/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Python 3.10+</li> <li>uv package manager</li> <li>Docker (optional, for containerized development)</li> <li>Git</li> </ul>"},{"location":"poetry-template/#important","title":"\u26a0\ufe0f Important","text":"<p>!</p> <p>This is a boilerplate template. After cloning or generating your project, remember to:</p> <ul> <li>Update your project name in <code>pyproject.toml</code> and <code>docker-compose.yml</code></li> <li>Replace this README with documentation specific to your project</li> <li>Configure environment variables in <code>.env.development</code> and <code>.env.production</code></li> <li>Customize the Makefile commands as needed for your project</li> </ul>"},{"location":"poetry-template/#quick-start","title":"\u26a1 Quick Start","text":"<p>Step 1: Clone the repository</p> <pre><code>git clone https://github.com/python-boilerplate/uv-template\ncd uv-template\n</code></pre> <p>Step 2: Initialize the project</p> <p><pre><code>make init\n</code></pre> This will install dependencies (with creating virtual environment) and set up pre-commit hooks</p> <p>Step 3: Set up environment variables</p> <pre><code>cp .env.example .env.development\n# Edit .env.development as needed\n</code></pre> <p>Step 4: Run the application</p> <pre><code>make run\n</code></pre>"},{"location":"poetry-template/features/","title":"Overview","text":""},{"location":"poetry-template/features/#info","title":"Info","text":"<p>!</p> <p>This template includes tools that I use myself, as well as some that are experimental.</p> <ul> <li>Therefore, I have only added those configurations that I use myself, without unnecessary details.</li> <li>But some features and tools may change as I gain more experience with them.</li> <li>Read more about each feature and its settings in the individual subsections of this section.</li> </ul>"},{"location":"poetry-template/features/#features","title":"\ud83d\ude80 Features","text":""},{"location":"poetry-template/features/#python-310","title":"Python 3.10+","text":""},{"location":"poetry-template/features/#uv","title":"uv","text":"<p>Ultra-fast Python project manager and dependency installer with lock file support and isolated environments.</p>"},{"location":"poetry-template/features/#docker-support","title":"Docker Support","text":"<p>Multi-stage Dockerfiles for easy local development and clean production containers.</p>"},{"location":"poetry-template/features/#github-actions-cicd","title":"GitHub Actions CI/CD","text":"<p>Automated linting, testing, static analysis, and security checks for every branch.</p>"},{"location":"poetry-template/features/#dev-containers","title":"Dev Containers","text":"<p>Ready-to-use development environment in GitHub Codespaces or VSCode Remote Containers.</p>"},{"location":"poetry-template/features/#code-quality-tools","title":"Code Quality Tools","text":"<p>Built-in Ruff (lint/format), MyPy (type checking), Pytest (testing), and Vermin (minimum Python version analysis).</p>"},{"location":"poetry-template/features/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Runs linters, formatting, and tests automatically before every commit.</p>"},{"location":"poetry-template/features/#commitizen","title":"Commitizen","text":"<p>Standardized commit messages with automated versioning and changelog updates.</p>"},{"location":"poetry-template/features/#environment-management","title":"Environment Management","text":"<p>Stage-based environment variable configuration for dev/prod with switching via <code>APP_STAGE</code>.</p>"},{"location":"poetry-template/features/#mkdocs-documentation","title":"MkDocs Documentation","text":"<p>Project documentation generated with MkDocs and the Material theme.</p>"},{"location":"poetry-template/features/#makefile-automation","title":"Makefile Automation","text":"<p>Common tasks are available as simple Makefile commands.</p>"},{"location":"poetry-template/features/commitizen/","title":"Commitizen","text":"<p>A tool for creating standardized commit messages and automated versioning in your project.</p>"},{"location":"poetry-template/features/commitizen/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>standardizing commit messages using the Conventional Commits specification</li> <li>automatically bumping project version and generating/updating <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (only updating)</li> <li>integrating with pre-commit hooks to ensure commit messages follow the defined style</li> </ul>"},{"location":"poetry-template/features/commitizen/#features","title":"Features","text":"<ul> <li>Interactive CLI for creating conventional commit messages via a wizard.</li> <li>Automatic version bump based on commit history (<code>major</code>, <code>minor</code>, <code>patch</code>).</li> <li>Generates and updates <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (only updating) automatically.</li> </ul>"},{"location":"poetry-template/features/commitizen/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make commit   # Interactive commit message creation (wizard)\nmake bump     # Bump version and update CHANGELOG.md\n</code></pre> <pre><code>cz commit # or cz c\ncz bump\n</code></pre> <pre><code>uv run cz commit # or uv run cz c\nuv run cz bump\n</code></pre>"},{"location":"poetry-template/features/commitizen/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use Commitizen with pre-commit, you need to add a configuration for it in your <code>.pre-commit-config.yaml</code> file.</p> <p>!</p> Hook (by commitizen)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/commitizen-tools/commitizen\n  rev: v4.8.3\n  hooks:\n    - id: commitizen\n      stages: [commit-msg]\n</code></pre> <ul> <li>To check how to create your own hook, see the Commitizen auto-check tutorial.</li> </ul>"},{"location":"poetry-template/features/commitizen/#configuration","title":"Configuration","text":"<p>All configuration for Commitizen in this template is located in pyproject.toml under the <code>[tool.commitizen]</code> section.</p>"},{"location":"poetry-template/features/commitizen/#example-workflow","title":"Example workflow","text":""},{"location":"poetry-template/features/commitizen/#without-pre-commit","title":"Without pre-commit","text":"<ul> <li>In the sense that the hook will run, but your message will be ignored because it matches the structure</li> </ul> <p>!</p> <ol> <li>Create a commit using <code>make commit</code> (or <code>cz commit</code>). The interactive CLI will help you compose a valid commit message.</li> <li>Bump version and generate changelog using <code>make bump</code> (or <code>cz bump</code>). This updates the version in <code>pyproject.toml</code> and regenerates <code>CHANGELOG.md</code> based on your commit history.</li> <li>Push changes: Push your code and the updated changelog/version to your repository.</li> </ol>"},{"location":"poetry-template/features/commitizen/#with-pre-commit","title":"With pre-commit","text":"<ul> <li>The pre-commit hook will check the message format.</li> </ul> <p>!</p> <ol> <li>Create a commit using <code>git commit -m \"feat: add new feature\"</code>.</li> <li>Bump version and generate changelog using <code>make bump</code> (or <code>cz bump</code>). This updates the version in <code>pyproject.toml</code> and regenerates <code>CHANGELOG.md</code> based on your commit history.</li> <li>Push changes: Push your code and the updated changelog/version to your repository.</li> </ol> <p>For more details on configuration, see the Commitizen Documentation</p>"},{"location":"poetry-template/features/devcontainers/","title":"Dev Containers","text":"<p>A dev container is a complete, reproducible development environment defined as code. It allows you to develop inside an isolated container using all required tools, dependencies, and settings, regardless of your host system.</p>"},{"location":"poetry-template/features/devcontainers/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Ensures consistent development environment for every developer, every time.</li> <li>Works out of the box in GitHub Codespaces, VS Code Remote Containers, and compatible tools.</li> <li>Automates installation of Python, Docker, uv, Commitizen, and other essential tools.</li> <li>Runs <code>make init</code> automatically after starting the container, so the project is ready to use immediately.</li> </ul>"},{"location":"poetry-template/features/devcontainers/#features","title":"Features","text":"<ul> <li>Based on the official <code>mcr.microsoft.com/devcontainers/python:1-3.110-bookworm</code> image (Python 3.10).</li> <li>Installs and configures:<ul> <li>Docker (with Buildx and Compose v2)</li> <li>uv (Python dependency manager)</li> <li>GitHub CLI</li> <li>GitHub Actions runner</li> <li>VS Code Python, Pylance, Ruff, and MyPy extensions</li> </ul> </li> <li>Runs <code>make init</code> after container creation to set up dependencies and git hooks.</li> <li>All project commands and tools are available as if run locally.</li> </ul>"},{"location":"poetry-template/features/devcontainers/#how-to-use-it","title":"How to use it?","text":"<p>!</p> <p>You can use dev containers in various ways depending on your development setup</p> VS Code:GitHub Codespaces:Other tools: <ul> <li>Install the Dev Containers extension.</li> <li>Open the project folder in VS Code.</li> <li>Click \u201cReopen in Container\u201d when prompted, or open the Command Palette (<code>F1</code>) and run \u201cDev Containers: Reopen in Container\u201d.</li> </ul> <ul> <li>Just click \u201cCode &gt; Codespaces &gt; Create codespace on main\u201d in your repository on GitHub.</li> </ul> <ul> <li>Any IDE or workflow that supports devcontainer.json will work.</li> </ul>"},{"location":"poetry-template/features/devcontainers/#configuration","title":"Configuration","text":"<p>All configuration for Devcontainers in this template is located in devcontainer.json.</p>"},{"location":"poetry-template/features/devcontainers/#example-workflow","title":"Example workflow","text":"<p>!</p> <ol> <li>Clone the repository.</li> <li>Open it in VS Code and reopen in container (or launch a Codespace).</li> <li>Wait for the container to build and initialize (tools and dependencies are installed automatically).</li> <li>Start developing!    Use <code>make</code> commands, run tests, or launch the app as you would locally.</li> </ol>"},{"location":"poetry-template/features/devcontainers/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All development tools, dependencies, and environment variables are isolated from your host system.</li> <li>Any changes to <code>.devcontainer/devcontainer.json</code> will trigger a rebuild on the next launch.</li> <li>The initial setup (<code>make init</code>) is fully automated for a zero-config first run.</li> </ul> <p>For more details on configuration, see the devcontainer.json specification and VS Code Dev Containers documentation.</p>"},{"location":"poetry-template/features/environment/","title":"Environment Management","text":"<p>Managing environment variables and configuration files is crucial for building robust and flexible Python applications.</p> <p>This template supports stage-based environment configuration (development and production) using the <code>APP_STAGE</code> variable, and loads the appropriate <code>.env.*</code> file automatically.</p>"},{"location":"poetry-template/features/environment/#how-environment-loading-works-in-this-project","title":"How environment loading works in this project","text":""},{"location":"poetry-template/features/environment/#stage-based-environment-selection","title":"Stage-based Environment Selection","text":"<ul> <li>The environment is controlled by the <code>APP_STAGE</code> variable, which can be set to values like <code>development</code> or <code>production</code>.</li> <li>Depending on <code>APP_STAGE</code>, the app loads the correct environment file:<ul> <li><code>APP_STAGE=development</code> \u2192 loads <code>.env.development</code></li> <li><code>APP_STAGE=production</code> \u2192 loads <code>.env.production</code></li> </ul> </li> </ul>"},{"location":"poetry-template/features/environment/#where-is-this-implemented","title":"Where is this implemented?","text":"<p>Environment loading logic is implemented in <code>src/config/env.py</code>.</p> Key logic from your code: src/config/env.py<pre><code>import os\nfrom pathlib import Path\nfrom typing import Final\n\nfrom environs import Env\n\nABS_PATH: Final[Path] = Path(__file__).resolve().parent.parent.parent\n\nAPP_STAGE: Final[str] = os.getenv(\"APP_STAGE\", \"development\")\n\nENV_FILE_MAP: Final[dict[str, Path]] = {\n    \"development\": ABS_PATH / \".env.development\",\n    \"production\": ABS_PATH / \".env.production\",\n}\n\nENV_PATH: Final[Path] = ENV_FILE_MAP[APP_STAGE]\n\n# or you can use this way to load the environment file:\n# ENV_PATH: Final[Path] = ABS_PATH / f\".env.{APP_STAGE}\"\n\nif not ENV_PATH.exists():\n    raise FileNotFoundError(f\"Environment file not found: {ENV_PATH}\")\n\nenv = Env()\nenv.read_env(ENV_PATH)\n</code></pre> <ul> <li>This code checks the value of <code>APP_STAGE</code>, determines the corresponding <code>.env.*</code> file, and loads it using environs.</li> <li>If the file does not exist, it raises an error and your application run failed.</li> </ul>"},{"location":"poetry-template/features/environment/#how-to-use-it","title":"How to use it","text":"<p>!</p> ManuallyDocker <ul> <li>To switch environments, just set <code>APP_STAGE</code> before running your app:     <pre><code>export APP_STAGE=production\nmake run\n</code></pre></li> <li>Or, pass it inline:     <pre><code>APP_STAGE=production make run\n</code></pre></li> </ul> <ul> <li>If you run your app in Docker, you can set <code>APP_STAGE</code> in your <code>docker-compose.yml</code> or <code>Dockerfile</code>:</li> </ul> docker-compose.ymlDockerfile <pre><code>environment:\n  - APP_STAGE=production\n</code></pre> <pre><code>ENV APP_STAGE=production\n</code></pre> <p>Important</p> <ul> <li>You needn't set <code>APP_STAGE</code> variable if you use <code>development</code> stage, it automatically will load <code>.env.development</code> file, but make sure if your file exists.</li> </ul>"},{"location":"poetry-template/features/environment/#alternative-using-pydantic-settings","title":"Alternative: Using Pydantic Settings","text":"<p>While the current approach is simple and robust, modern Python projects often use Pydantic (and pydantic-settings) for type-safe, validated environment management.</p> <p>Dependency</p> <ul> <li>If you want to use Pydantic Settings, you need to install <code>pydantic-settings</code> package:     <pre><code>uv add pydantic-settings\n</code></pre></li> </ul> Example Implementation with Pydantic: src/config/env.py<pre><code>\"\"\"Environment configuration module for loading environment variables.\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom typing import Final\n\nfrom pydantic import field_validator\nfrom pydantic_core.core_schema import FieldValidationInfo\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nABS_PATH: Final[Path] = Path(__file__).resolve().parent.parent.parent\n\nAPP_STAGE: Final[str] = os.getenv(\"APP_STAGE\", \"development\")\n\n\nclass BaseEnvSettings(BaseSettings):\n    \"\"\"\n    Environment configuration settings.\n\n    This class loads environment variables from a specified file based on the application stage.\n    \"\"\"  # noqa: E501\n\n    ENV_PATH: Path = ABS_PATH / f\".env.{APP_STAGE}\"\n\n    @field_validator(\"ENV_PATH\", mode=\"before\")\n    @classmethod\n    def check_env_path_exists(cls, v: Path, info: FieldValidationInfo) -&gt; Path:\n        \"\"\"\n        Validates that the provided environment file path exists.\n\n        Args:\n            v (Path): The path to the environment file.\n            info (FieldValidationInfo): Additional validation information.\n\n        Raises:\n            FileNotFoundError: If the environment file does not exist.\n\n        Returns:\n            Path: The validated environment file path.\n        \"\"\"\n\n        if not v.exists():\n            raise FileNotFoundError(\n                f\"Environment file not found: {cls.ENV_PATH}\")\n        return v\n\n    model_config = SettingsConfigDict(\n        env_file=ENV_PATH,\n        env_file_encoding=\"utf-8\",\n        env_nested_delimiter=\"__\",\n        extra=\"ignore\",\n        case_sensitive=True\n    )\n\n\nclass Settings(BaseEnvSettings):\n    \"\"\"Application settings.\"\"\"\n\n    YOUR_VARIABLE: str  # Example variable, add your own\n\nenv = Settings()\n</code></pre>"},{"location":"poetry-template/features/environment/#description-of-environment-variables-used-in-this-project","title":"Description of environment variables used in this project","text":"<ul> <li> <p><code>APP_STAGE</code> - The current application stage, which determines which environment file to load (e.g., <code>development</code>, <code>production</code>).</p> </li> <li> <p><code>DOCKER_PROJECT_NAME</code> - The name of your project, used for Docker image naming and container management.</p> </li> <li><code>DOCKER_NETWORK_NAME</code> - The name of the Docker network your containers will use.</li> <li><code>DOCKER_IMAGE_TAG</code> - The tag for your Docker image, typically the version or stage (e.g., <code>latest</code>, <code>dev</code>, <code>prod</code>).</li> <li><code>DOCKER_CONTAINER_NAME</code> - The name of the Docker container, which can be used to easily identify and manage it.</li> </ul> <p>Note</p> <ul> <li>All these docker variables are used in <code>docker-compose.yml</code> and <code>Makefile</code> for creating a Docker image and running a container</li> <li>In <code>Makefile</code> these variables are defined directly in the file, they are not loaded from the .env files.</li> </ul> <p>More about Docker and his variables you can see in Docker section</p> <p>More about Makefile you can see in Makefile section</p>"},{"location":"poetry-template/features/environment/#references","title":"References","text":"<ul> <li>environs</li> <li>Pydantic Settings documentation</li> </ul>"},{"location":"poetry-template/features/makefile/","title":"Makefile","text":"<p>A simple way to automate everyday project tasks with a single command. It allows you to run typical scripts (<code>init</code>, <code>test</code>, <code>lint</code>, <code>run</code>, etc.) without remembering long commands, and standardizes workflows for all developers.</p>"},{"location":"poetry-template/features/makefile/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Makes work scripts short and convenient (<code>make test</code> instead of <code>uv run pytest</code>)</li> <li>Unifies command execution for local work, CI/CD, and devcontainer</li> <li>Allows you to easily add your own automation scripts</li> </ul>"},{"location":"poetry-template/features/makefile/#how-to-run-makefile-commands","title":"How to run Makefile commands","text":"<ul> <li>Your should be in the project root directory (where the <code>Makefile</code> is located).</li> </ul> <p>!</p> <ul> <li> <p>Command format:   <pre><code>make &lt;command_name&gt;\n</code></pre>   For example:   <pre><code>make init\nmake lint\nmake run\n</code></pre></p> </li> <li> <p>To see all available commands (with short descriptions), use:   <pre><code>make help\n</code></pre>   Or just <code>make</code> \u2014 by default, it runs help.</p> </li> </ul>"},{"location":"poetry-template/features/makefile/#how-to-add-your-own-command-or-section","title":"How to add your own command or section","text":"<p>!</p> New CommandNew Section <ol> <li>Open the Makefile.</li> <li> <p>Add a new target in the format:     <pre><code>my-command:  ## Command description\n    &lt;shell-command&gt;\n</code></pre></p> <ul> <li>The <code>##</code> prefix indicates a description of command that will appear in the help output.</li> </ul> <p>For example:     <pre><code>echo-hello:  ## Print Hello World\n    echo \"Hello World\"\n</code></pre></p> </li> <li> <p>Now you can run:     <pre><code>make echo-hello\n</code></pre></p> </li> <li>Now you can see your command in the help:     <pre><code>make help\n</code></pre></li> </ol> <ol> <li>Open the Makefile.</li> <li> <p>Add a new section in the format:     <pre><code>##@ Name of section\nsetup:\n    &lt;shell-command&gt;\n</code></pre></p> <ul> <li>The <code>##@</code> prefix indicates a new section in the help output.</li> <li>All commands that follow this line will be included in this section.</li> </ul> <p>For example:     <pre><code>##@ My section\nmy-command:\n    echo \"This is my new section\"\n</code></pre></p> </li> <li> <p>Now you can run:     <pre><code>make my-command\n</code></pre></p> </li> <li> <p>Now you can see your section in the help:     <pre><code>make help\n</code></pre></p> </li> </ol>"},{"location":"poetry-template/features/makefile/#how-does-the-help-command-work","title":"How does the <code>help</code> command work?","text":"<ul> <li>In this template, the <code>make help</code> command automatically parses the Makefile, looks for targets with comments, and displays a short help message.</li> <li>Therefore, to have your command appear in help, always add a comment right after the target name and put it to correct section:     <pre><code>##@ Local development\nlint: ## Run the linter\n    $(ur) ruff check --config=pyproject.toml --fix ./src/\n</code></pre></li> </ul>"},{"location":"poetry-template/features/makefile/#useful","title":"Useful","text":"<ul> <li>All main template commands are described in Commands section.</li> <li>Makefile is OS-independent (works on Linux/macOS, on Windows via WSL or Git Bash).</li> <li>You can combine commands, for example:     <pre><code>make lint format test\n</code></pre></li> </ul> <p>For more details on configuration, see the GNU Make documentation</p>"},{"location":"poetry-template/features/mkdocs/","title":"MkDocs","text":"<p>A fast and simple static site generator for project documentation, optimized for Markdown and the Material theme.</p>"},{"location":"poetry-template/features/mkdocs/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Generates project documentation as a beautiful static site</li> <li>Supports Markdown, code highlighting, and the Material theme</li> <li>Allows you to preview documentation locally and easily publish it</li> </ul>"},{"location":"poetry-template/features/mkdocs/#how-to-run-mkdocs-in-this-template","title":"How to run MkDocs in this template","text":"<p>!</p> Start the documentation server locallyBuild the static siteOpen the documentation in your browser <pre><code>make serve\n# or manually:\nuv run mkdocs serve\n</code></pre> <pre><code>uv run mkdocs build\n</code></pre> <ul> <li>After running <code>make serve</code>, go to your <code>localhost</code> address with port <code>8000</code> in the browser.</li> </ul>"},{"location":"poetry-template/features/mkdocs/#example-workflow","title":"Example workflow","text":"<p>How to create your own documentation</p> <ol> <li> <p>Create a new markdown file in the <code>docs/</code> folder     For example:     <pre><code>touch docs/how_to_start.md\n</code></pre></p> </li> <li> <p>Add this file to the navigation in mkdocs.yml: mkdocs.yml<pre><code>nav:\n  - Home: index.md\n  - How to Start: how_to_start.md\n</code></pre></p> </li> <li> <p>Start the local server to preview the result: <pre><code>make serve\n# or\nuv run mkdocs serve\n</code></pre></p> </li> <li> <p>Open http://localhost:8000 in your browser and check that the page appears in the menu.</p> </li> <li> <p>Edit markdown files \u2014 changes are picked up automatically.</p> </li> </ol>"},{"location":"poetry-template/features/mkdocs/#configuration","title":"Configuration","text":"<ul> <li>All MkDocs settings (theme, navigation, plugins, etc.) are in the mkdocs.yml file.</li> </ul> <p>For more details on configuration, see the MkDocs Documentation and Material for MkDocs</p>"},{"location":"poetry-template/features/pre-commit/","title":"Pre-Commit","text":"<p>A framework for managing and maintaining multi-language pre-commit hooks.</p>"},{"location":"poetry-template/features/pre-commit/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Automatically runs linters, formatters, and tests before each commit</li> <li>Ensures code quality and formatting consistency on every commit</li> <li>Prevents committing code that doesn't meet project standards</li> </ul>"},{"location":"poetry-template/features/pre-commit/#how-to-use-it","title":"How to use it?","text":"<p>!</p> Setup (runs automatically on make init)Run all hooks manually <pre><code>make init\n# or manually:\nuv run pre-commit install --install-hooks\n</code></pre> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"poetry-template/features/pre-commit/#how-to-add-hooks","title":"How to add hooks","text":"<ul> <li> <p>Edit the .pre-commit-config.yaml file and add the required hook. For example, to add Ruff:</p> .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.11.12\n  hooks:\n    - id: ruff-check\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n</code></pre> </li> <li> <p>After editing, run:</p> <pre><code>uv run pre-commit install\n</code></pre> </li> </ul>"},{"location":"poetry-template/features/pre-commit/#used-hooks","title":"Used hooks","text":"<p>!</p> <ul> <li>ruff: linter and formatter</li> <li>mypy: type checker</li> <li>pytest: testing framework</li> <li>commitizen: commit message linter</li> </ul>"},{"location":"poetry-template/features/pre-commit/#configuration","title":"Configuration","text":"<ul> <li>All pre-commit hook settings are in .pre-commit-config.yaml.</li> </ul> <p>For more details on configuration, see the pre-commit Documentation.</p>"},{"location":"poetry-template/features/python/","title":"Python","text":"<p>Python is the main programming language for this project.</p>"},{"location":"poetry-template/features/python/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>All application code, tests, and tools are written in <code>python</code></li> <li>Supports type hints, modern syntax, async features, and tooling</li> <li>Project requires <code>python 3.10+</code></li> </ul>"},{"location":"poetry-template/features/python/#how-is-it-configured-and-used","title":"How is it configured and used?","text":"<ul> <li>The minimum required <code>python</code> version is specified in pyproject.toml and in Dockerfiles.</li> <li>All dependencies are managed using uv.</li> <li>You can use any <code>python</code> 3.10+ interpreter (locally, in Docker, or in a devcontainer).</li> </ul>"},{"location":"poetry-template/features/uv/","title":"uv","text":"<p>An ultra-fast Python project manager that simplifies working with dependencies and tools without unnecessary steps.</p>"},{"location":"poetry-template/features/uv/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Installs all current project dependencies and features (main and dev) after cloning (project initialization)</li> <li>Automatically creates an isolated environment (similar to venv, but without manual steps)</li> <li>Allows running any Python tools (e.g., pytest, ruff, mypy) without activating venv or extra configuration</li> <li>Ensures a consistent environment for local development, CI/CD, and devcontainer</li> </ul>"},{"location":"poetry-template/features/uv/#how-it-works-in-this-template","title":"How it works in this template","text":"<ul> <li> <p>After cloning the project, just run:     <pre><code>make init\n</code></pre>     This command:</p> <ul> <li>Installs all dependencies via uv</li> <li>Sets up pre-commit hooks</li> </ul> </li> <li> <p>To run Python tools (tests, linters, etc.), you needn't activate venv:     <pre><code>uv run pytest\nuv run ruff check ./src/\nuv run mypy ./src/\n</code></pre></p> </li> <li> <p>To add a new dependency:     <pre><code>uv add &lt;package-name&gt;\n</code></pre>     or for dev dependencies:     <pre><code>uv add --group dev &lt;package-name&gt;\n</code></pre></p> </li> </ul>"},{"location":"poetry-template/features/uv/#how-to-update-or-change-the-python-version-for-the-project","title":"How to update or change the Python version for the project","text":"<p>!</p> <ol> <li> <p>Edit the Python version in pyproject.toml, for example:</p> pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.11\"\n</code></pre> </li> <li> <p>Remove the old environment (optional):</p> <pre><code>rm -r .venv\n</code></pre> </li> <li> <p>Change the Python version in your <code>.python-version</code> file:</p> <pre><code>uv python pin 3.11\n</code></pre> <ul> <li>You can specify any interpreter available on your system (<code>python3.12</code>, <code>python3.10</code>, etc.).</li> <li>If the specified Python version is not installed, uv will automatically install it.</li> <li>If you don't specify a version, uv uses the current Python version installed on your system.</li> </ul> </li> <li> <p>Reinstall dependencies:</p> <pre><code>make init\n\n# or only dependencies without reinstalling hooks\nuv sync --link-mode=copy\n</code></pre> </li> <li> <p>The project now uses the desired Python version in its venv.</p> </li> </ol>"},{"location":"poetry-template/features/uv/#configuration","title":"Configuration","text":"<ul> <li>All configuration for uv in this template is located in pyproject.toml (file is generated automatically by uv).</li> </ul> <p>For more details on configuration, see the uv Documentation</p>"},{"location":"poetry-template/features/ci/github_actions/","title":"GitHub Actions","text":"<p>A powerful CI/CD platform built into GitHub for automating workflows: testing, linting, type-checking, and more.</p>"},{"location":"poetry-template/features/ci/github_actions/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Automatically runs linters, tests, and checks code quality for every push and pull request</li> <li>Ensures your code works on multiple Python versions</li> <li>Checks code compatibility with the minimum Python version using Vermin</li> <li>Runs all key quality tools: Ruff, MyPy, Pytest, and more</li> </ul>"},{"location":"poetry-template/features/ci/github_actions/#how-does-it-work-in-this-template","title":"How does it work in this template?","text":"<ul> <li>Workflow files are located in <code>.github/workflows/</code>.</li> <li>Actions are triggered automatically on push or pull request to key branches.</li> <li>Each workflow installs only used dependencies using default <code>pip</code>.</li> <li>Main scenarios covered:<ul> <li>Linting: Checks code style with Ruff</li> <li>Type Checking: Validates type annotations using MyPy</li> <li>Testing: Runs all tests with Pytest</li> <li>Compatibility: Checks minimal Python version compatibility with Vermin</li> <li>Multi-Python: Runs tests on several Python versions (e.g., 3.10, 3.11, 3.12, 3.13)</li> </ul> </li> </ul>"},{"location":"poetry-template/features/ci/github_actions/#example-workflows","title":"Example workflows","text":"<p>Common workflow: Lint, Typecheck, Test</p> .github/workflows/code-quality.yml<pre><code>name: Lint, Typecheck, Test\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: uv pip install -r requirements-dev.txt\n      - name: Lint\n        run: uv run ruff check ./src/\n      - name: Typecheck\n        run: uv run mypy ./src/\n      - name: Test\n        run: uv run pytest -v\n</code></pre> <p>Compatibility check: Vermin</p> <p>See Vermin section for details.</p>"},{"location":"poetry-template/features/ci/github_actions/#how-to-add-or-edit-workflows","title":"How to add or edit workflows","text":"<ul> <li>All workflow YAML files are in <code>.github/workflows/</code></li> <li>To add a new workflow, just copy an existing <code>.yml</code> file and edit as needed.</li> </ul>"},{"location":"poetry-template/features/ci/github_actions/#configuration-and-secrets","title":"Configuration and secrets","text":"<ul> <li>No sensitive secrets are used by default in this template.</li> <li>For advanced scenarios (e.g., publishing, deploying), add secrets in GitHub repo settings and reference via <code>${{ secrets.YOUR_SECRET }}</code>.</li> </ul> <p>For more details, see the GitHub Actions Documentation.</p>"},{"location":"poetry-template/features/code_quality/mypy/","title":"MyPy","text":"<p>Static type checker for Python, designed to ensure code correctness and catch type errors before runtime.</p>"},{"location":"poetry-template/features/code_quality/mypy/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>type checking</code> Python code to catch type errors early</li> <li>enforcing and verifying type annotations</li> <li>checking code quality before every commit and during CI pipelines</li> </ul>"},{"location":"poetry-template/features/code_quality/mypy/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make typecheck\n</code></pre> <pre><code>mypy --config-file=pyproject.toml ./src/\n</code></pre> <pre><code>uv run mypy --config-file=pyproject.toml ./src/\n</code></pre>"},{"location":"poetry-template/features/code_quality/mypy/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use MyPy with pre-commit, you need to add the appropriate configuration to <code>.pre-commit-config.yaml</code>.</p> <p>!</p> Hook (by mypy)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.16.0\n  hooks:\n    - id: mypy\n      args: [ --config-file=pyproject.toml ]\n      files: ^src/\n</code></pre> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # check types\n    - id: mypy\n      name: Mypy\n      description: Run Mypy for type checking types in Python code\n      entry: uv run mypy\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config-file=pyproject.toml, ./src/ ]\n</code></pre>"},{"location":"poetry-template/features/code_quality/mypy/#configuration","title":"Configuration","text":"<p>All configuration for Mypy in this template is located in pyproject.toml under the <code>[tool.mypy]</code> section.</p> <p>For more details on configuration, see the MyPy Documentation</p>"},{"location":"poetry-template/features/code_quality/pytest/","title":"Pytest","text":"<p>A powerful framework for testing Python code, supporting both synchronous and asynchronous tests.</p>"},{"location":"poetry-template/features/code_quality/pytest/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>unit testing</code> and <code>integration testing</code> of Python code</li> <li>testing both synchronous and asynchronous functions</li> <li>automated quality checks before every commit and in CI pipelines</li> </ul>"},{"location":"poetry-template/features/code_quality/pytest/#important","title":"Important","text":"<p>!</p> <ul> <li>For testing asynchronous functions, the pytest-asyncio extension is added, which makes it easy to write and run async tests alongside regular ones.</li> </ul>"},{"location":"poetry-template/features/code_quality/pytest/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make test\n</code></pre> <pre><code>pytest -v\n</code></pre> <pre><code>uv run pytest -v\n</code></pre>"},{"location":"poetry-template/features/code_quality/pytest/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>Only a local hook is used for integration with pre-commit.</p> <p>Why?</p> <p>Pytest does not officially provide a pre-commit hook repository, and running tests often requires custom parameters or environments (for example, via uv or with specific options). A local hook gives maximum flexibility and control.</p> <p>!</p> Local hook (recommended) .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # Run pytest.\n    - id: pytest\n      name: pytest\n      entry: uv run pytest\n      language: system\n      types: [python]\n      pass_filenames: false\n      args: [ -v ]\n</code></pre>"},{"location":"poetry-template/features/code_quality/pytest/#configuration","title":"Configuration","text":"<p>All configuration for Pytest (such as plugins) in this template is located in pyproject.toml under the <code>[tool.pytest.ini_options]</code> section.</p> <p>For more details on configuration, see the Pytest Documentation</p> <p>About async tests: pytest-asyncio documentation</p>"},{"location":"poetry-template/features/code_quality/ruff/","title":"Ruff","text":"<p>An extremely fast Python linter and code formatter, written in Rust.</p>"},{"location":"poetry-template/features/code_quality/ruff/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>linting</code> Python code to enforce coding standards and catch potential errors</li> <li><code>formatting</code> Python code to ensure consistent style</li> <li>\u0441hecking code quality before every commit and during CI pipelines</li> </ul>"},{"location":"poetry-template/features/code_quality/ruff/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make lint # lint your code\n\nmake format # format your code\n</code></pre> <pre><code>ruff check --config=pyproject.toml --fix ./src/\n</code></pre> <pre><code>ruff format --config=pyproject.toml ./src/\n</code></pre> <pre><code>uv run ruff check --config=pyproject.toml --fix ./src/\n</code></pre> <pre><code>uv run ruff format --config=pyproject.toml ./src/\n</code></pre>"},{"location":"poetry-template/features/code_quality/ruff/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use Ruff with pre-commit, you need to add a configuration for it in your <code>.pre-commit-config.yaml</code> file.</p> <p>!</p> Hook (by ruff)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.11.12\n  hooks:\n    # Run the linter.\n    - id: ruff-check\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n\n    # Run the formatter.\n    - id: ruff-format\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n</code></pre> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # lint code\n    - id: ruff\n      name: Ruff\n      description: Run Ruff for linting Python code\n      entry: uv run ruff check\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config=pyproject.toml, ./src/ ]\n\n    # format code\n    - id: ruff\n      name: Ruff\n      description: Run Ruff for formatting Python code\n      entry: uv run ruff format\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config=pyproject.toml, ./src/ ]\n</code></pre>"},{"location":"poetry-template/features/code_quality/ruff/#configuration","title":"Configuration","text":"<p>All configuration for Ruff in this template is located in pyproject.toml under the <code>[tool.ruff]</code> section.</p> <p>For more details on configuration, see the Ruff Documentation</p>"},{"location":"poetry-template/features/code_quality/vermin/","title":"Vermin","text":"<p>A tool for determining the minimum Python version required to run your code, based on the syntax and standard libraries used.</p>"},{"location":"poetry-template/features/code_quality/vermin/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>analyzing the <code>minimal required Python version</code> for running your code</li> </ul>"},{"location":"poetry-template/features/code_quality/vermin/#important","title":"Important","text":"<ul> <li>Vermin analyzes only your code's syntax and use of the standard library.</li> </ul> <p>!</p> <ul> <li>If you use external libraries that require newer Python versions, Vermin will not detect this. It does not check dependencies from requirements.txt or pyproject.toml.</li> <li>In this template, Vermin is used exclusively in CI via GitHub Actions to ensure code backward compatibility.</li> </ul>"},{"location":"poetry-template/features/code_quality/vermin/#how-to-use-it","title":"How to use it?","text":"<ul> <li>There is no need to run Vermin manually or set it up locally \u2014 it is integrated into the CI workflow and runs automatically in GitHub Actions.</li> <li>But of course, you can run it locally directly in your terminal or using pre-commit hook.</li> </ul>"},{"location":"poetry-template/features/code_quality/vermin/#examples","title":"Examples","text":"<p>!</p> Locally (terminal):Pre-commit hook:Github Actions: <pre><code>uv run vermin --eval-annotations --backport typing --no-parse-comments .\n</code></pre> <ul> <li><code>--eval-annotations</code> - evaluates type annotations to determine the minimum Python version.</li> <li><code>--backport typing</code> - backports the <code>typing</code> module to older Python versions.</li> <li><code>--no-parse-comments</code> - ignores comments in the code, focusing only on actual code syntax.</li> <li> <p><code>.</code> - specifies the current directory as the target for analysis.</p> </li> <li> <p>You can also specify a specific file or directory instead of <code>.</code> to analyze only that part of your codebase.</p> </li> </ul> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # Run Vermin.\n    - id: vermin\n      name: vermin\n      entry: uv run vermin .\n      language: system\n      types: [python]\n      pass_filenames: false\n      args: [ --eval-annotations, --backport typing, --no-parse-comments ]\n</code></pre> .github/workflows/compatibility.yml<pre><code>jobs:\n  compatibility:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.13\"\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install vermin\n      - name: Check minimal Python version\n        run: vermin --eval-annotations --backport typing --no-parse-comments .\n</code></pre>"},{"location":"poetry-template/features/code_quality/vermin/#configuration","title":"Configuration","text":"<p>Vermin does not have its own configuration file \u2014 all parameters are set via the command line.</p> <p>For more details on configuration, see the Vermin Documentation</p>"},{"location":"poetry-template/home/changelog/","title":"Changelog","text":""},{"location":"poetry-template/home/changelog/#0100-2025-06-14","title":"0.10.0 (2025-06-14)","text":""},{"location":"poetry-template/home/changelog/#feat","title":"Feat","text":"<ul> <li>add commands for doing commit and bumping version</li> <li>env.py: add checking if .env file exists or not</li> <li>devcontainer.json: add github cli to devcontainer</li> <li>add init command to setup project using one command</li> <li>add gitlab workflows</li> <li>add gitlab workflows</li> <li>remove github workflows</li> </ul>"},{"location":"poetry-template/home/changelog/#fix","title":"Fix","text":"<ul> <li>remove themes</li> <li>Makefile: fix command to initialize project</li> <li>.pre-commit-config.yaml: fix running pytest</li> <li>fix syntax error</li> <li>restore github actions for main branch after merge</li> <li>set the correct app stage for dev image</li> <li>fix adding all env files to dev image</li> <li>fix command to run container and add logs command to check prod container logs</li> </ul>"},{"location":"poetry-template/home/changelog/#090-2025-06-07","title":"0.9.0 (2025-06-07)","text":""},{"location":"poetry-template/home/changelog/#feat_1","title":"Feat","text":"<ul> <li>add loading env variables based on app stage</li> </ul>"},{"location":"poetry-template/home/changelog/#fix_1","title":"Fix","text":"<ul> <li>move getting correct path to env file to another variable</li> <li>fix name of workflow</li> </ul>"},{"location":"poetry-template/home/changelog/#080-2025-06-05","title":"0.8.0 (2025-06-05)","text":""},{"location":"poetry-template/home/changelog/#feat_2","title":"Feat","text":"<ul> <li>change workflow to check minimal python version to run code</li> </ul>"},{"location":"poetry-template/home/changelog/#070-2025-06-04","title":"0.7.0 (2025-06-04)","text":""},{"location":"poetry-template/home/changelog/#feat_3","title":"Feat","text":"<ul> <li>add workflow for testing on multiple Python versions</li> <li>add workflow for linting, type-checking and testing</li> </ul>"},{"location":"poetry-template/home/changelog/#fix_2","title":"Fix","text":"<ul> <li>fix problem with running ruff linter</li> <li>fix problem with testing async functions</li> </ul>"},{"location":"poetry-template/home/changelog/#060-2025-06-01","title":"0.6.0 (2025-06-01)","text":""},{"location":"poetry-template/home/changelog/#feat_4","title":"Feat","text":"<ul> <li>add pytest and configure for testing sync/async functions</li> </ul>"},{"location":"poetry-template/home/changelog/#050-2025-05-31","title":"0.5.0 (2025-05-31)","text":""},{"location":"poetry-template/home/changelog/#feat_5","title":"Feat","text":"<ul> <li>update vscode profile for devcontainer</li> <li>add vscode profile to devcontainer configuration</li> <li>configure Dependabot for automated dependency updates and security checks</li> <li>setup .devcontainer for codespaces</li> </ul>"},{"location":"poetry-template/home/changelog/#041-2025-05-31","title":"0.4.1 (2025-05-31)","text":""},{"location":"poetry-template/home/changelog/#fix_3","title":"Fix","text":"<ul> <li>fix error calling entrypoint file inside container</li> </ul>"},{"location":"poetry-template/home/changelog/#040-2025-05-31","title":"0.4.0 (2025-05-31)","text":""},{"location":"poetry-template/home/changelog/#feat_6","title":"Feat","text":"<ul> <li>add makefile for simplifies running scripts and tasks</li> </ul>"},{"location":"poetry-template/home/changelog/#031-2025-05-29","title":"0.3.1 (2025-05-29)","text":""},{"location":"poetry-template/home/changelog/#fix_4","title":"Fix","text":"<ul> <li>fix pre-commit hooks</li> </ul>"},{"location":"poetry-template/home/changelog/#030-2025-05-29","title":"0.3.0 (2025-05-29)","text":""},{"location":"poetry-template/home/changelog/#feat_7","title":"Feat","text":"<ul> <li>add mkdocs --dev dependency for generating documentation</li> </ul>"},{"location":"poetry-template/home/changelog/#020-2025-05-28","title":"0.2.0 (2025-05-28)","text":""},{"location":"poetry-template/home/changelog/#feat_8","title":"Feat","text":"<ul> <li>add commitizen --dev dependency</li> <li>add pre-commit --dev dependency</li> <li>initial commit</li> </ul>"},{"location":"poetry-template/home/contributing/","title":"Contributing Guide","text":"<p>Welcome! Thank you for your interest in improving python-boilerplate/poetry-template. This project is my personal template, and only bug fixes are accepted.</p>"},{"location":"poetry-template/home/contributing/#reporting-a-bug","title":"\ud83d\udc1e Reporting a Bug","text":"<p>Before submitting a bug report:</p> <ul> <li>Check that the issue hasn\u2019t already been reported in the Issues section.</li> </ul> <p>When reporting a bug, please include:</p> <ul> <li>Steps to reproduce the bug</li> <li>Expected vs actual behavior</li> <li>Any logs, error traces, or screenshots (if applicable)</li> <li>Details about your Python version, OS, and any relevant environment info</li> </ul> <p>Clear, detailed bug reports or feature descriptions help address problems faster.</p>"},{"location":"poetry-template/home/contributing/#how-to-contribute-pull-request","title":"\ud83d\udd04 How to Contribute (Pull Request)","text":"<ol> <li>Fork this repository to your own GitHub account.</li> <li>Create a branch for your fix. Branch naming suggestion: <code>fix/short-bug-description</code></li> <li>Apply your changes on that branch (if it's a bug).</li> <li>Test your code:<ul> <li>Run the test suite: <pre><code>make test\n</code></pre></li> <li>Run the linter: <pre><code>make lint &amp;&amp; make format\n</code></pre></li> </ul> </li> <li>Describe your PR clearly and informatively.</li> <li>Open a Pull Request from your branch to this repository.</li> </ol>"},{"location":"poetry-template/home/contributing/#code-requirements","title":"\u2705 Code Requirements","text":"<p>!</p> <ul> <li>Follow the existing code style.</li> <li>Make sure all tests pass (<code>pytest</code>) (if needed).</li> <li>Lint and Format your code with <code>ruff</code> before submitting (if needed).</li> <li>Do not add new features or change existing functionality without agreement.</li> </ul>"},{"location":"poetry-template/home/contributing/#questions","title":"\u2753 Questions","text":"<p>!</p> <p>If you have questions about contributing, please open an issue or comment on an existing one.</p> <p>Thank you for helping make this template better!</p>"},{"location":"poetry-template/home/license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Yurii | monok8i \ud83e\udd8b\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"poetry-template/reference/project_structure/","title":"Project Structure","text":""},{"location":"poetry-template/reference/project_structure/#structure","title":"Structure","text":"<p>Below is an overview of the key files and directories:</p> <p>!</p> Project Structure<pre><code>.\n\u251c\u2500\u2500 CHANGELOG.md               # Automatically generated changelog (Commitizen)\n\u251c\u2500\u2500 CONTRIBUTING.md            # Guidelines for contributing to the project\n\u251c\u2500\u2500 LICENSE                    # Project license (MIT)\n\u251c\u2500\u2500 Makefile                   # Task automation for common development workflows\n\u251c\u2500\u2500 README.md                  # Project overview, usage, and quickstart\n\u251c\u2500\u2500 __main__.py                # Main entrypoint for running the application\n\u251c\u2500\u2500 assets/                    # Static assets (images, icons, etc.)\n\u251c\u2500\u2500 dev.Dockerfile             # Dockerfile for fast local/dev environment with uv\n\u251c\u2500\u2500 dev.dockerignore           # Exclude files from dev Docker image build context\n\u251c\u2500\u2500 docker/                    # Docker-related files (volumes, configs, etc.)\n\u2502   \u2514\u2500\u2500 docker-entrypoint.sh   # Entrypoint script for Docker containers\n\u251c\u2500\u2500 docker-compose.yml         # Compose file for multi-container development\n\u251c\u2500\u2500 docs/                      # Documentation source files for MkDocs\n\u251c\u2500\u2500 example.env                # Example environment variables for configuration\n\u251c\u2500\u2500 mkdocs.yml                 # MkDocs configuration (site navigation, theme, etc.)\n\u251c\u2500\u2500 prod.Dockerfile            # Production-optimized Dockerfile\n\u251c\u2500\u2500 prod.dockerignore          # Exclude files from prod Docker image build context\n\u251c\u2500\u2500 pyproject.toml             # Project metadata and configuration (PEP 621, tool configs)\n\u251c\u2500\u2500 requirements-dev.txt       # [*] (Optional) Dev dependencies pin file (if used)\n\u251c\u2500\u2500 requirements.txt           # Locked, pinned dependencies (auto-generated by uv)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 env.py             # Environment/configuration loading (env file/vars)\n\u2502   \u251c\u2500\u2500 factory.py             # (Placeholder) for app/service factory setup\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 logging/\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u251c\u2500\u2500 config.py      # Logging configuration constants\n\u2502           \u2514\u2500\u2500 setup.py       # Logging setup function\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_func.py           # Example unit tests (sync &amp; async)\n</code></pre>"},{"location":"poetry-template/reference/project_structure/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All configs of development and CI tools are defined in <code>pyproject.toml</code> (without <code>mkdocs</code> and <code>pre-commit</code>).</li> <li>Pre-commit, linting, type-checking, and tests are automated via Makefile and CI.</li> <li>Environment configuration is stage-based (development/production).</li> </ul>"},{"location":"poetry-template/usage/","title":"Quickstart","text":"<p>This section describes how to get started with this project: how to clone or create your own copy, and how to launch the app in different ways (locally, with Docker, or in Codespaces).</p>"},{"location":"poetry-template/usage/#how-to-get-the-project","title":"How to Get the Project","text":"<p>!</p> Option A: Use as a TemplateOption B: Clone Directly <p>If you want to start your own project based on this boilerplate, use GitHub\u2019s \u201cUse this template\u201d button:</p> <p>workflow</p> <ol> <li>Go to the repository page.</li> <li>Click Use this template (top right).</li> <li>Create a new repository under your GitHub account.</li> <li>Clone your new repository:     <pre><code>git clone https://github.com/&lt;your-username&gt;/&lt;your-new-repo&gt;.git\ncd &lt;your-new-repo&gt;\n</code></pre></li> </ol> <p>If you want to contribute here or just try the boilerplate as-is:</p> <p>workflow</p> <ol> <li>Go to the repository page.</li> <li>Click Code &gt; Download ZIP (or clone the repo).</li> <li>Extract the ZIP file (if used).</li> <li>Navigate into the project directory:     <pre><code>cd uv-template\n</code></pre></li> </ol>"},{"location":"poetry-template/usage/#how-to-run-the-project","title":"How to Run the Project","text":"<p>!</p> Option 1: GitHub Codespaces / Dev Containers (Zero Setup)Option 2: Local Development (No Docker)Option 3: Local Development with Docker (Dev Environment)Option 4: Production Docker Image <p>workflow</p> <ol> <li>On GitHub, click Code &gt; Codespaces &gt; Create codespace on main.</li> <li>Or, open the project in VS Code with the Dev Containers extension.</li> <li>Choose \u201cReopen in Container\u201d when prompted.</li> <li>Wait while all dependencies and tools are installed automatically.</li> <li>You can now use all <code>make</code> commands, run the app, tests, etc.</li> </ol> <p>Requirements: Python 3.10+, uv (or pip if you know what you\u2019re doing).</p> <p>workflow</p> <ol> <li>Install uv (recommended):     <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></li> <li>Install dependencies &amp; set up pre-commit hooks:     <pre><code>make init\n</code></pre></li> <li>Run the app:     <pre><code>make run\n</code></pre></li> <li>Run tests, linter, formatter as needed:     <pre><code>make test\nmake lint\nmake format\n</code></pre></li> </ol> <p>Best for: Consistent dev environment, works anywhere Docker runs.</p> <p>workflow</p> <ol> <li>Build the development Docker image:     <pre><code>make dev-build\n</code></pre></li> <li>Start the dev container (in background):     <pre><code>make dev-up\n</code></pre></li> <li>Enter a shell in the container (if needed):     <pre><code>make dev-exec\n</code></pre></li> <li>View logs, stop, or remove the container as needed:     <pre><code>make dev-logs\nmake dev-stop\nmake dev-down\n</code></pre></li> </ol> <p>Dev Docker specifics</p> <ul> <li>Uses <code>dev.Dockerfile</code> and <code>dev.dockerignore</code><ul> <li>Before building it runs <code>cp dev.dockerignore .dockerignore</code> to specify files to ignore</li> </ul> </li> <li>Loads environment from <code>.env.development</code></li> <li>Supports hot reload and development tools</li> </ul> <p>Best for: Testing production-like runs or deployment.</p> <p>workflow</p> <ol> <li>Build the production image:     <pre><code>make prod-build\n</code></pre></li> <li>Run the production container:     <pre><code>make prod-run\n</code></pre></li> <li>Enter a shell in the container (if needed):     <pre><code>make prod-exec\n</code></pre></li> <li>Run container with <code>bash</code> or view logs:     <pre><code>make prod-bash # temporary, with .env.production and with --rm flag\nmake prod-logs\n</code></pre></li> </ol> <p>Prod Docker specifics</p> <ul> <li>Uses <code>prod.Dockerfile</code> and <code>prod.dockerignore</code><ul> <li>Before building it runs <code>cp prod.dockerignore .dockerignore</code> to specify files to ignore</li> </ul> </li> <li>Loads environment from <code>.env.production</code></li> <li>Optimized for minimal size and performance</li> </ul>"},{"location":"poetry-template/usage/#useful-tips","title":"Useful Tips","text":"<ul> <li>All common tasks (init, test, lint, format, docs, etc.) are available as simple <code>make</code> commands.</li> <li>See docs/usage/commands.md for the full list.</li> <li>Environments and secrets are configured via <code>.env.*</code> files (see <code>.env.example</code>).</li> <li>The project is ready for CI/CD with GitHub Actions and GitLab CI out of the box.</li> </ul>"},{"location":"poetry-template/usage/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you have permission errors with git hooks, run:   <pre><code>chmod +x .git/hooks/*\n</code></pre></li> <li>For Docker issues, ensure Docker is running and you have permissions (try <code>sudo</code> if needed).</li> <li>For Codespaces/Dev Containers, see the Dev Containers docs.</li> </ul>"},{"location":"poetry-template/usage/#more-info","title":"More Info","text":"<ul> <li>See Features for detailed explanations of tools and setup.</li> <li>See Project Structure for a file/folder overview.</li> </ul>"},{"location":"poetry-template/usage/commands/","title":"Makefile Commands","text":"<p>This template maximally automates working with the project using a <code>Makefile</code>. It allows you to perform all main actions with a single command, without remembering long utility options.</p> <p>!</p> <p>All commands are run as <code>make &lt;command&gt;</code> (for example, <code>make test</code>).</p>"},{"location":"poetry-template/usage/commands/#quick-list","title":"Quick List","text":"<p>!</p> Makefile<pre><code>make init         # Initialize the project (install dependencies, set up pre-commit)\nmake run          # Run the application locally (without Docker)\nmake test         # Run tests\nmake lint         # Lint code (Ruff, autofix)\nmake format       # Format code (Ruff)\nmake typecheck    # Static type checking (MyPy)\nmake clean        # Clean caches (`__pycache__`, .mypy_cache, .ruff_cache, .pytest_cache)\nmake serve        # Start local documentation server (MkDocs)\n</code></pre>"},{"location":"poetry-template/usage/commands/#local-development","title":"Local Development","text":"<ul> <li><code>make init</code>     Installs dependencies via uv and sets up pre-commit hooks.</li> <li><code>make run</code>     Runs the application (<code>__main__.py</code>) in the current environment.</li> <li><code>make test</code>     Runs all automated tests using [pytest].</li> <li><code>make lint</code>     Checks code style and applies autofix using [Ruff].</li> <li><code>make format</code>     Formats code according to Ruff settings.</li> <li><code>make typecheck</code>     Checks types using [MyPy].</li> <li><code>make clean</code>     Removes all tool caches.</li> </ul>"},{"location":"poetry-template/usage/commands/#docker","title":"Docker:","text":""},{"location":"poetry-template/usage/commands/#development","title":"Development","text":"<ul> <li><code>make dev-build</code>     Builds the dev Docker image based on <code>dev.Dockerfile</code>.</li> <li><code>make dev-up</code>     Runs the dev container in the background.</li> <li><code>make dev-stop</code>     Stops the dev container without removing it.</li> <li><code>make dev-down</code>     Stops and removes the dev container.</li> <li><code>make dev-logs</code>     Shows logs from the dev container.</li> <li><code>make dev-exec</code>     Opens a bash shell in the running dev container.</li> <li><code>make dev-bash</code>     Starts a new bash shell in the dev container (temporary, with .env.development).</li> </ul>"},{"location":"poetry-template/usage/commands/#production","title":"Production","text":"<ul> <li><code>make prod-build</code>     Builds the production Docker image based on <code>prod.Dockerfile</code>.</li> <li><code>make prod-run</code>     Runs the production container in the background.</li> <li><code>make prod-exec</code>     Opens a bash shell in the running prod container.</li> <li><code>make prod-bash</code>     Starts a new bash shell in the prod container (temporary, with .env.production and with <code>--rm</code> flag).</li> <li><code>make prod-logs</code>     Shows logs from the prod container.</li> </ul>"},{"location":"poetry-template/usage/commands/#gitrelease","title":"Git/Release","text":"<ul> <li><code>make commit</code>     Creates a commit using Commitizen (launches a wizard for conventional commits).</li> <li><code>make bump</code>     Bumps the project version and automatically updates <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (Commitizen).</li> </ul>"},{"location":"poetry-template/usage/commands/#documentation","title":"Documentation","text":"<ul> <li><code>make serve</code>     Starts a local documentation server (MkDocs).</li> </ul>"},{"location":"poetry-template/usage/commands/#help","title":"Help","text":"<ul> <li><code>make help</code>     Outputs a list of all available commands and their short descriptions.</li> </ul>"},{"location":"poetry-template/usage/commands/#common-makefile-shortcuts","title":"Common Makefile Shortcuts","text":"<p>!</p> <ul> <li><code>d</code> \u2014 shortcut for <code>docker</code></li> <li><code>dc</code> \u2014 shortcut for <code>docker compose</code></li> <li><code>ur</code> \u2014 shortcut for <code>uv run</code></li> </ul>"},{"location":"poetry-template/usage/commands/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All Makefile commands can be used in CI/CD, locally, or in a devcontainer.</li> <li>No other scripts or CLIs are needed: all main scenarios are automated via Makefile.</li> <li>All container parameters (such as environment variables) are defined in the corresponding <code>.env.*</code> files.</li> </ul> <p>For more details about used features, see the Features section in the documentation</p>"},{"location":"uv-template/","title":"Overview","text":"UV Template  <p>A comprehensive template for quickly starting new Python projects with modern development tools and best practices.</p> <p> </p>"},{"location":"uv-template/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Python 3.10+</li> <li>uv \u2014 Ultra-fast Python package installer and dependency resolver</li> <li>Docker Support \u2014 Multi-stage Dockerfiles for both local development and clean production containers</li> <li>GitHub Actions CI/CD \u2014 Automated pipelines for code quality checks, testing, security scanning, and Python compatibility validation</li> <li>Dev Containers \u2014 Pre-configured development environment for codespaces or remote development</li> <li>Code Quality Tools \u2014 Integrated linting and formatting with Ruff, static type checking with MyPy, comprehensive testing with Pytest and checking minimal Python version to run your code (without dependencies) with Vermin</li> <li>Pre-commit Hooks \u2014 Automated code quality enforcement (linting, formatting, and tests before every commit)</li> <li>Commitizen \u2014 Standardized commit messages and automated changelog/versioning</li> <li>Environment Management \u2014 Stage-based configuration system supporting development and production environments</li> <li>MkDocs Documentation \u2014 Documentation with Material theme and automated generation</li> <li>Makefile Automation \u2014 Simplified command interface for common development tasks</li> </ul>"},{"location":"uv-template/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Python 3.10+</li> <li>uv package manager</li> <li>Docker (optional, for containerized development)</li> <li>Git</li> </ul>"},{"location":"uv-template/#important","title":"\u26a0\ufe0f Important","text":"<p>!</p> <p>This is a boilerplate template. After cloning or generating your project, remember to:</p> <ul> <li>Update your project name in <code>pyproject.toml</code> and <code>docker-compose.yml</code></li> <li>Replace this README with documentation specific to your project</li> <li>Configure environment variables in <code>.env.development</code> and <code>.env.production</code></li> <li>Customize the Makefile commands as needed for your project</li> </ul>"},{"location":"uv-template/#quick-start","title":"\u26a1 Quick Start","text":"<p>Step 1: Clone the repository</p> <pre><code>git clone https://github.com/python-boilerplate/uv-template\ncd uv-template\n</code></pre> <p>Step 2: Initialize the project</p> <p><pre><code>make init\n</code></pre> This will install dependencies (with creating virtual environment) and set up pre-commit hooks</p> <p>Step 3: Set up environment variables</p> <pre><code>cp .env.example .env.development\n# Edit .env.development as needed\n</code></pre> <p>Step 4: Run the application</p> <pre><code>make run\n</code></pre>"},{"location":"uv-template/features/","title":"Overview","text":""},{"location":"uv-template/features/#info","title":"Info","text":"<p>!</p> <p>This template includes tools that I use myself, as well as some that are experimental.</p> <ul> <li>Therefore, I have only added those configurations that I use myself, without unnecessary details.</li> <li>But some features and tools may change as I gain more experience with them.</li> <li>Read more about each feature and its settings in the individual subsections of this section.</li> </ul>"},{"location":"uv-template/features/#features","title":"\ud83d\ude80 Features","text":""},{"location":"uv-template/features/#python-310","title":"Python 3.10+","text":""},{"location":"uv-template/features/#uv","title":"uv","text":"<p>Ultra-fast Python project manager and dependency installer with lock file support and isolated environments.</p>"},{"location":"uv-template/features/#docker-support","title":"Docker Support","text":"<p>Multi-stage Dockerfiles for easy local development and clean production containers.</p>"},{"location":"uv-template/features/#github-actions-cicd","title":"GitHub Actions CI/CD","text":"<p>Automated linting, testing, static analysis, and security checks for every branch.</p>"},{"location":"uv-template/features/#dev-containers","title":"Dev Containers","text":"<p>Ready-to-use development environment in GitHub Codespaces or VSCode Remote Containers.</p>"},{"location":"uv-template/features/#code-quality-tools","title":"Code Quality Tools","text":"<p>Built-in Ruff (lint/format), MyPy (type checking), Pytest (testing), and Vermin (minimum Python version analysis).</p>"},{"location":"uv-template/features/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Runs linters, formatting, and tests automatically before every commit.</p>"},{"location":"uv-template/features/#commitizen","title":"Commitizen","text":"<p>Standardized commit messages with automated versioning and changelog updates.</p>"},{"location":"uv-template/features/#environment-management","title":"Environment Management","text":"<p>Stage-based environment variable configuration for dev/prod with switching via <code>APP_STAGE</code>.</p>"},{"location":"uv-template/features/#mkdocs-documentation","title":"MkDocs Documentation","text":"<p>Project documentation generated with MkDocs and the Material theme.</p>"},{"location":"uv-template/features/#makefile-automation","title":"Makefile Automation","text":"<p>Common tasks are available as simple Makefile commands.</p>"},{"location":"uv-template/features/commitizen/","title":"Commitizen","text":"<p>A tool for creating standardized commit messages and automated versioning in your project.</p>"},{"location":"uv-template/features/commitizen/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>standardizing commit messages using the Conventional Commits specification</li> <li>automatically bumping project version and generating/updating <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (only updating)</li> <li>integrating with pre-commit hooks to ensure commit messages follow the defined style</li> </ul>"},{"location":"uv-template/features/commitizen/#features","title":"Features","text":"<ul> <li>Interactive CLI for creating conventional commit messages via a wizard.</li> <li>Automatic version bump based on commit history (<code>major</code>, <code>minor</code>, <code>patch</code>).</li> <li>Generates and updates <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (only updating) automatically.</li> </ul>"},{"location":"uv-template/features/commitizen/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make commit   # Interactive commit message creation (wizard)\nmake bump     # Bump version and update CHANGELOG.md\n</code></pre> <pre><code>cz commit # or cz c\ncz bump\n</code></pre> <pre><code>uv run cz commit # or uv run cz c\nuv run cz bump\n</code></pre>"},{"location":"uv-template/features/commitizen/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use Commitizen with pre-commit, you need to add a configuration for it in your <code>.pre-commit-config.yaml</code> file.</p> <p>!</p> Hook (by commitizen)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/commitizen-tools/commitizen\n  rev: v4.8.3\n  hooks:\n    - id: commitizen\n      stages: [commit-msg]\n</code></pre> <ul> <li>To check how to create your own hook, see the Commitizen auto-check tutorial.</li> </ul>"},{"location":"uv-template/features/commitizen/#configuration","title":"Configuration","text":"<p>All configuration for Commitizen in this template is located in pyproject.toml under the <code>[tool.commitizen]</code> section.</p>"},{"location":"uv-template/features/commitizen/#example-workflow","title":"Example workflow","text":""},{"location":"uv-template/features/commitizen/#without-pre-commit","title":"Without pre-commit","text":"<ul> <li>In the sense that the hook will run, but your message will be ignored because it matches the structure</li> </ul> <p>!</p> <ol> <li>Create a commit using <code>make commit</code> (or <code>cz commit</code>). The interactive CLI will help you compose a valid commit message.</li> <li>Bump version and generate changelog using <code>make bump</code> (or <code>cz bump</code>). This updates the version in <code>pyproject.toml</code> and regenerates <code>CHANGELOG.md</code> based on your commit history.</li> <li>Push changes: Push your code and the updated changelog/version to your repository.</li> </ol>"},{"location":"uv-template/features/commitizen/#with-pre-commit","title":"With pre-commit","text":"<ul> <li>The pre-commit hook will check the message format.</li> </ul> <p>!</p> <ol> <li>Create a commit using <code>git commit -m \"feat: add new feature\"</code>.</li> <li>Bump version and generate changelog using <code>make bump</code> (or <code>cz bump</code>). This updates the version in <code>pyproject.toml</code> and regenerates <code>CHANGELOG.md</code> based on your commit history.</li> <li>Push changes: Push your code and the updated changelog/version to your repository.</li> </ol> <p>For more details on configuration, see the Commitizen Documentation</p>"},{"location":"uv-template/features/devcontainers/","title":"Dev Containers","text":"<p>A dev container is a complete, reproducible development environment defined as code. It allows you to develop inside an isolated container using all required tools, dependencies, and settings, regardless of your host system.</p>"},{"location":"uv-template/features/devcontainers/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Ensures consistent development environment for every developer, every time.</li> <li>Works out of the box in GitHub Codespaces, VS Code Remote Containers, and compatible tools.</li> <li>Automates installation of Python, Docker, uv, Commitizen, and other essential tools.</li> <li>Runs <code>make init</code> automatically after starting the container, so the project is ready to use immediately.</li> </ul>"},{"location":"uv-template/features/devcontainers/#features","title":"Features","text":"<ul> <li>Based on the official <code>mcr.microsoft.com/devcontainers/python:1-3.110-bookworm</code> image (Python 3.10).</li> <li>Installs and configures:<ul> <li>Docker (with Buildx and Compose v2)</li> <li>uv (Python dependency manager)</li> <li>GitHub CLI</li> <li>GitHub Actions runner</li> <li>VS Code Python, Pylance, Ruff, and MyPy extensions</li> </ul> </li> <li>Runs <code>make init</code> after container creation to set up dependencies and git hooks.</li> <li>All project commands and tools are available as if run locally.</li> </ul>"},{"location":"uv-template/features/devcontainers/#how-to-use-it","title":"How to use it?","text":"<p>!</p> <p>You can use dev containers in various ways depending on your development setup</p> VS Code:GitHub Codespaces:Other tools: <ul> <li>Install the Dev Containers extension.</li> <li>Open the project folder in VS Code.</li> <li>Click \u201cReopen in Container\u201d when prompted, or open the Command Palette (<code>F1</code>) and run \u201cDev Containers: Reopen in Container\u201d.</li> </ul> <ul> <li>Just click \u201cCode &gt; Codespaces &gt; Create codespace on main\u201d in your repository on GitHub.</li> </ul> <ul> <li>Any IDE or workflow that supports devcontainer.json will work.</li> </ul>"},{"location":"uv-template/features/devcontainers/#configuration","title":"Configuration","text":"<p>All configuration for Devcontainers in this template is located in devcontainer.json.</p>"},{"location":"uv-template/features/devcontainers/#example-workflow","title":"Example workflow","text":"<p>!</p> <ol> <li>Clone the repository.</li> <li>Open it in VS Code and reopen in container (or launch a Codespace).</li> <li>Wait for the container to build and initialize (tools and dependencies are installed automatically).</li> <li>Start developing!    Use <code>make</code> commands, run tests, or launch the app as you would locally.</li> </ol>"},{"location":"uv-template/features/devcontainers/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All development tools, dependencies, and environment variables are isolated from your host system.</li> <li>Any changes to <code>.devcontainer/devcontainer.json</code> will trigger a rebuild on the next launch.</li> <li>The initial setup (<code>make init</code>) is fully automated for a zero-config first run.</li> </ul> <p>For more details on configuration, see the devcontainer.json specification and VS Code Dev Containers documentation.</p>"},{"location":"uv-template/features/environment/","title":"Environment Management","text":"<p>Managing environment variables and configuration files is crucial for building robust and flexible Python applications.</p> <p>This template supports stage-based environment configuration (development and production) using the <code>APP_STAGE</code> variable, and loads the appropriate <code>.env.*</code> file automatically.</p>"},{"location":"uv-template/features/environment/#how-environment-loading-works-in-this-project","title":"How environment loading works in this project","text":""},{"location":"uv-template/features/environment/#stage-based-environment-selection","title":"Stage-based Environment Selection","text":"<ul> <li>The environment is controlled by the <code>APP_STAGE</code> variable, which can be set to values like <code>development</code> or <code>production</code>.</li> <li>Depending on <code>APP_STAGE</code>, the app loads the correct environment file:<ul> <li><code>APP_STAGE=development</code> \u2192 loads <code>.env.development</code></li> <li><code>APP_STAGE=production</code> \u2192 loads <code>.env.production</code></li> </ul> </li> </ul>"},{"location":"uv-template/features/environment/#where-is-this-implemented","title":"Where is this implemented?","text":"<p>Environment loading logic is implemented in <code>src/config/env.py</code>.</p> Key logic from your code: src/config/env.py<pre><code>import os\nfrom pathlib import Path\nfrom typing import Final\n\nfrom environs import Env\n\nABS_PATH: Final[Path] = Path(__file__).resolve().parent.parent.parent\n\nAPP_STAGE: Final[str] = os.getenv(\"APP_STAGE\", \"development\")\n\nENV_FILE_MAP: Final[dict[str, Path]] = {\n    \"development\": ABS_PATH / \".env.development\",\n    \"production\": ABS_PATH / \".env.production\",\n}\n\nENV_PATH: Final[Path] = ENV_FILE_MAP[APP_STAGE]\n\n# or you can use this way to load the environment file:\n# ENV_PATH: Final[Path] = ABS_PATH / f\".env.{APP_STAGE}\"\n\nif not ENV_PATH.exists():\n    raise FileNotFoundError(f\"Environment file not found: {ENV_PATH}\")\n\nenv = Env()\nenv.read_env(ENV_PATH)\n</code></pre> <ul> <li>This code checks the value of <code>APP_STAGE</code>, determines the corresponding <code>.env.*</code> file, and loads it using environs.</li> <li>If the file does not exist, it raises an error and your application run failed.</li> </ul>"},{"location":"uv-template/features/environment/#how-to-use-it","title":"How to use it","text":"<p>!</p> ManuallyDocker <ul> <li>To switch environments, just set <code>APP_STAGE</code> before running your app:     <pre><code>export APP_STAGE=production\nmake run\n</code></pre></li> <li>Or, pass it inline:     <pre><code>APP_STAGE=production make run\n</code></pre></li> </ul> <ul> <li>If you run your app in Docker, you can set <code>APP_STAGE</code> in your <code>docker-compose.yml</code> or <code>Dockerfile</code>:</li> </ul> docker-compose.ymlDockerfile <pre><code>environment:\n  - APP_STAGE=production\n</code></pre> <pre><code>ENV APP_STAGE=production\n</code></pre> <p>Important</p> <ul> <li>You needn't set <code>APP_STAGE</code> variable if you use <code>development</code> stage, it automatically will load <code>.env.development</code> file, but make sure if your file exists.</li> </ul>"},{"location":"uv-template/features/environment/#alternative-using-pydantic-settings","title":"Alternative: Using Pydantic Settings","text":"<p>While the current approach is simple and robust, modern Python projects often use Pydantic (and pydantic-settings) for type-safe, validated environment management.</p> <p>Dependency</p> <ul> <li>If you want to use Pydantic Settings, you need to install <code>pydantic-settings</code> package:     <pre><code>uv add pydantic-settings\n</code></pre></li> </ul> Example Implementation with Pydantic: src/config/env.py<pre><code>\"\"\"Environment configuration module for loading environment variables.\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom typing import Final\n\nfrom pydantic import field_validator\nfrom pydantic_core.core_schema import FieldValidationInfo\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nABS_PATH: Final[Path] = Path(__file__).resolve().parent.parent.parent\n\nAPP_STAGE: Final[str] = os.getenv(\"APP_STAGE\", \"development\")\n\n\nclass BaseEnvSettings(BaseSettings):\n    \"\"\"\n    Environment configuration settings.\n\n    This class loads environment variables from a specified file based on the application stage.\n    \"\"\"  # noqa: E501\n\n    ENV_PATH: Path = ABS_PATH / f\".env.{APP_STAGE}\"\n\n    @field_validator(\"ENV_PATH\", mode=\"before\")\n    @classmethod\n    def check_env_path_exists(cls, v: Path, info: FieldValidationInfo) -&gt; Path:\n        \"\"\"\n        Validates that the provided environment file path exists.\n\n        Args:\n            v (Path): The path to the environment file.\n            info (FieldValidationInfo): Additional validation information.\n\n        Raises:\n            FileNotFoundError: If the environment file does not exist.\n\n        Returns:\n            Path: The validated environment file path.\n        \"\"\"\n\n        if not v.exists():\n            raise FileNotFoundError(\n                f\"Environment file not found: {cls.ENV_PATH}\")\n        return v\n\n    model_config = SettingsConfigDict(\n        env_file=ENV_PATH,\n        env_file_encoding=\"utf-8\",\n        env_nested_delimiter=\"__\",\n        extra=\"ignore\",\n        case_sensitive=True\n    )\n\n\nclass Settings(BaseEnvSettings):\n    \"\"\"Application settings.\"\"\"\n\n    YOUR_VARIABLE: str  # Example variable, add your own\n\nenv = Settings()\n</code></pre>"},{"location":"uv-template/features/environment/#description-of-environment-variables-used-in-this-project","title":"Description of environment variables used in this project","text":"<ul> <li> <p><code>APP_STAGE</code> - The current application stage, which determines which environment file to load (e.g., <code>development</code>, <code>production</code>).</p> </li> <li> <p><code>DOCKER_PROJECT_NAME</code> - The name of your project, used for Docker image naming and container management.</p> </li> <li><code>DOCKER_NETWORK_NAME</code> - The name of the Docker network your containers will use.</li> <li><code>DOCKER_IMAGE_TAG</code> - The tag for your Docker image, typically the version or stage (e.g., <code>latest</code>, <code>dev</code>, <code>prod</code>).</li> <li><code>DOCKER_CONTAINER_NAME</code> - The name of the Docker container, which can be used to easily identify and manage it.</li> </ul> <p>Note</p> <ul> <li>All these docker variables are used in <code>docker-compose.yml</code> and <code>Makefile</code> for creating a Docker image and running a container</li> <li>In <code>Makefile</code> these variables are defined directly in the file, they are not loaded from the .env files.</li> </ul> <p>More about Docker and his variables you can see in Docker section</p> <p>More about Makefile you can see in Makefile section</p>"},{"location":"uv-template/features/environment/#references","title":"References","text":"<ul> <li>environs</li> <li>Pydantic Settings documentation</li> </ul>"},{"location":"uv-template/features/makefile/","title":"Makefile","text":"<p>A simple way to automate everyday project tasks with a single command. It allows you to run typical scripts (<code>init</code>, <code>test</code>, <code>lint</code>, <code>run</code>, etc.) without remembering long commands, and standardizes workflows for all developers.</p>"},{"location":"uv-template/features/makefile/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Makes work scripts short and convenient (<code>make test</code> instead of <code>uv run pytest</code>)</li> <li>Unifies command execution for local work, CI/CD, and devcontainer</li> <li>Allows you to easily add your own automation scripts</li> </ul>"},{"location":"uv-template/features/makefile/#how-to-run-makefile-commands","title":"How to run Makefile commands","text":"<ul> <li>Your should be in the project root directory (where the <code>Makefile</code> is located).</li> </ul> <p>!</p> <ul> <li> <p>Command format:   <pre><code>make &lt;command_name&gt;\n</code></pre>   For example:   <pre><code>make init\nmake lint\nmake run\n</code></pre></p> </li> <li> <p>To see all available commands (with short descriptions), use:   <pre><code>make help\n</code></pre>   Or just <code>make</code> \u2014 by default, it runs help.</p> </li> </ul>"},{"location":"uv-template/features/makefile/#how-to-add-your-own-command-or-section","title":"How to add your own command or section","text":"<p>!</p> New CommandNew Section <ol> <li>Open the Makefile.</li> <li> <p>Add a new target in the format:     <pre><code>my-command:  ## Command description\n    &lt;shell-command&gt;\n</code></pre></p> <ul> <li>The <code>##</code> prefix indicates a description of command that will appear in the help output.</li> </ul> <p>For example:     <pre><code>echo-hello:  ## Print Hello World\n    echo \"Hello World\"\n</code></pre></p> </li> <li> <p>Now you can run:     <pre><code>make echo-hello\n</code></pre></p> </li> <li>Now you can see your command in the help:     <pre><code>make help\n</code></pre></li> </ol> <ol> <li>Open the Makefile.</li> <li> <p>Add a new section in the format:     <pre><code>##@ Name of section\nsetup:\n    &lt;shell-command&gt;\n</code></pre></p> <ul> <li>The <code>##@</code> prefix indicates a new section in the help output.</li> <li>All commands that follow this line will be included in this section.</li> </ul> <p>For example:     <pre><code>##@ My section\nmy-command:\n    echo \"This is my new section\"\n</code></pre></p> </li> <li> <p>Now you can run:     <pre><code>make my-command\n</code></pre></p> </li> <li> <p>Now you can see your section in the help:     <pre><code>make help\n</code></pre></p> </li> </ol>"},{"location":"uv-template/features/makefile/#how-does-the-help-command-work","title":"How does the <code>help</code> command work?","text":"<ul> <li>In this template, the <code>make help</code> command automatically parses the Makefile, looks for targets with comments, and displays a short help message.</li> <li>Therefore, to have your command appear in help, always add a comment right after the target name and put it to correct section:     <pre><code>##@ Local development\nlint: ## Run the linter\n    $(ur) ruff check --config=pyproject.toml --fix ./src/\n</code></pre></li> </ul>"},{"location":"uv-template/features/makefile/#useful","title":"Useful","text":"<ul> <li>All main template commands are described in Commands section.</li> <li>Makefile is OS-independent (works on Linux/macOS, on Windows via WSL or Git Bash).</li> <li>You can combine commands, for example:     <pre><code>make lint format test\n</code></pre></li> </ul> <p>For more details on configuration, see the GNU Make documentation</p>"},{"location":"uv-template/features/mkdocs/","title":"MkDocs","text":"<p>A fast and simple static site generator for project documentation, optimized for Markdown and the Material theme.</p>"},{"location":"uv-template/features/mkdocs/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Generates project documentation as a beautiful static site</li> <li>Supports Markdown, code highlighting, and the Material theme</li> <li>Allows you to preview documentation locally and easily publish it</li> </ul>"},{"location":"uv-template/features/mkdocs/#how-to-run-mkdocs-in-this-template","title":"How to run MkDocs in this template","text":"<p>!</p> Start the documentation server locallyBuild the static siteOpen the documentation in your browser <pre><code>make serve\n# or manually:\nuv run mkdocs serve\n</code></pre> <pre><code>uv run mkdocs build\n</code></pre> <ul> <li>After running <code>make serve</code>, go to your <code>localhost</code> address with port <code>8000</code> in the browser.</li> </ul>"},{"location":"uv-template/features/mkdocs/#example-workflow","title":"Example workflow","text":"<p>How to create your own documentation</p> <ol> <li> <p>Create a new markdown file in the <code>docs/</code> folder     For example:     <pre><code>touch docs/how_to_start.md\n</code></pre></p> </li> <li> <p>Add this file to the navigation in mkdocs.yml: mkdocs.yml<pre><code>nav:\n  - Home: index.md\n  - How to Start: how_to_start.md\n</code></pre></p> </li> <li> <p>Start the local server to preview the result: <pre><code>make serve\n# or\nuv run mkdocs serve\n</code></pre></p> </li> <li> <p>Open http://localhost:8000 in your browser and check that the page appears in the menu.</p> </li> <li> <p>Edit markdown files \u2014 changes are picked up automatically.</p> </li> </ol>"},{"location":"uv-template/features/mkdocs/#configuration","title":"Configuration","text":"<ul> <li>All MkDocs settings (theme, navigation, plugins, etc.) are in the mkdocs.yml file.</li> </ul> <p>For more details on configuration, see the MkDocs Documentation and Material for MkDocs</p>"},{"location":"uv-template/features/pre-commit/","title":"Pre-Commit","text":"<p>A framework for managing and maintaining multi-language pre-commit hooks.</p>"},{"location":"uv-template/features/pre-commit/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Automatically runs linters, formatters, and tests before each commit</li> <li>Ensures code quality and formatting consistency on every commit</li> <li>Prevents committing code that doesn't meet project standards</li> </ul>"},{"location":"uv-template/features/pre-commit/#how-to-use-it","title":"How to use it?","text":"<p>!</p> Setup (runs automatically on make init)Run all hooks manually <pre><code>make init\n# or manually:\nuv run pre-commit install --install-hooks\n</code></pre> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"uv-template/features/pre-commit/#how-to-add-hooks","title":"How to add hooks","text":"<ul> <li> <p>Edit the .pre-commit-config.yaml file and add the required hook. For example, to add Ruff:</p> .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.11.12\n  hooks:\n    - id: ruff-check\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n</code></pre> </li> <li> <p>After editing, run:</p> <pre><code>uv run pre-commit install\n</code></pre> </li> </ul>"},{"location":"uv-template/features/pre-commit/#used-hooks","title":"Used hooks","text":"<p>!</p> <ul> <li>ruff: linter and formatter</li> <li>mypy: type checker</li> <li>pytest: testing framework</li> <li>commitizen: commit message linter</li> </ul>"},{"location":"uv-template/features/pre-commit/#configuration","title":"Configuration","text":"<ul> <li>All pre-commit hook settings are in .pre-commit-config.yaml.</li> </ul> <p>For more details on configuration, see the pre-commit Documentation.</p>"},{"location":"uv-template/features/python/","title":"Python","text":"<p>Python is the main programming language for this project.</p>"},{"location":"uv-template/features/python/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>All application code, tests, and tools are written in <code>python</code></li> <li>Supports type hints, modern syntax, async features, and tooling</li> <li>Project requires <code>python 3.10+</code></li> </ul>"},{"location":"uv-template/features/python/#how-is-it-configured-and-used","title":"How is it configured and used?","text":"<ul> <li>The minimum required <code>python</code> version is specified in pyproject.toml and in Dockerfiles.</li> <li>All dependencies are managed using uv.</li> <li>You can use any <code>python</code> 3.10+ interpreter (locally, in Docker, or in a devcontainer).</li> </ul>"},{"location":"uv-template/features/uv/","title":"uv","text":"<p>An ultra-fast Python project manager that simplifies working with dependencies and tools without unnecessary steps.</p>"},{"location":"uv-template/features/uv/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Installs all current project dependencies and features (main and dev) after cloning (project initialization)</li> <li>Automatically creates an isolated environment (similar to venv, but without manual steps)</li> <li>Allows running any Python tools (e.g., pytest, ruff, mypy) without activating venv or extra configuration</li> <li>Ensures a consistent environment for local development, CI/CD, and devcontainer</li> </ul>"},{"location":"uv-template/features/uv/#how-it-works-in-this-template","title":"How it works in this template","text":"<ul> <li> <p>After cloning the project, just run:     <pre><code>make init\n</code></pre>     This command:</p> <ul> <li>Installs all dependencies via uv</li> <li>Sets up pre-commit hooks</li> </ul> </li> <li> <p>To run Python tools (tests, linters, etc.), you needn't activate venv:     <pre><code>uv run pytest\nuv run ruff check ./src/\nuv run mypy ./src/\n</code></pre></p> </li> <li> <p>To add a new dependency:     <pre><code>uv add &lt;package-name&gt;\n</code></pre>     or for dev dependencies:     <pre><code>uv add --group dev &lt;package-name&gt;\n</code></pre></p> </li> </ul>"},{"location":"uv-template/features/uv/#how-to-update-or-change-the-python-version-for-the-project","title":"How to update or change the Python version for the project","text":"<p>!</p> <ol> <li> <p>Edit the Python version in pyproject.toml, for example:</p> pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.11\"\n</code></pre> </li> <li> <p>Remove the old environment (optional):</p> <pre><code>rm -r .venv\n</code></pre> </li> <li> <p>Change the Python version in your <code>.python-version</code> file:</p> <pre><code>uv python pin 3.11\n</code></pre> <ul> <li>You can specify any interpreter available on your system (<code>python3.12</code>, <code>python3.10</code>, etc.).</li> <li>If the specified Python version is not installed, uv will automatically install it.</li> <li>If you don't specify a version, uv uses the current Python version installed on your system.</li> </ul> </li> <li> <p>Reinstall dependencies:</p> <pre><code>make init\n\n# or only dependencies without reinstalling hooks\nuv sync --link-mode=copy\n</code></pre> </li> <li> <p>The project now uses the desired Python version in its venv.</p> </li> </ol>"},{"location":"uv-template/features/uv/#configuration","title":"Configuration","text":"<ul> <li>All configuration for uv in this template is located in pyproject.toml (file is generated automatically by uv).</li> </ul> <p>For more details on configuration, see the uv Documentation</p>"},{"location":"uv-template/features/ci/github_actions/","title":"GitHub Actions","text":"<p>A powerful CI/CD platform built into GitHub for automating workflows: testing, linting, type-checking, and more.</p>"},{"location":"uv-template/features/ci/github_actions/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>Automatically runs linters, tests, and checks code quality for every push and pull request</li> <li>Ensures your code works on multiple Python versions</li> <li>Checks code compatibility with the minimum Python version using Vermin</li> <li>Runs all key quality tools: Ruff, MyPy, Pytest, and more</li> </ul>"},{"location":"uv-template/features/ci/github_actions/#how-does-it-work-in-this-template","title":"How does it work in this template?","text":"<ul> <li>Workflow files are located in <code>.github/workflows/</code>.</li> <li>Actions are triggered automatically on push or pull request to key branches.</li> <li>Each workflow installs only used dependencies using default <code>pip</code>.</li> <li>Main scenarios covered:<ul> <li>Linting: Checks code style with Ruff</li> <li>Type Checking: Validates type annotations using MyPy</li> <li>Testing: Runs all tests with Pytest</li> <li>Compatibility: Checks minimal Python version compatibility with Vermin</li> <li>Multi-Python: Runs tests on several Python versions (e.g., 3.10, 3.11, 3.12, 3.13)</li> </ul> </li> </ul>"},{"location":"uv-template/features/ci/github_actions/#example-workflows","title":"Example workflows","text":"<p>Common workflow: Lint, Typecheck, Test</p> .github/workflows/code-quality.yml<pre><code>name: Lint, Typecheck, Test\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: uv pip install -r requirements-dev.txt\n      - name: Lint\n        run: uv run ruff check ./src/\n      - name: Typecheck\n        run: uv run mypy ./src/\n      - name: Test\n        run: uv run pytest -v\n</code></pre> <p>Compatibility check: Vermin</p> <p>See Vermin section for details.</p>"},{"location":"uv-template/features/ci/github_actions/#how-to-add-or-edit-workflows","title":"How to add or edit workflows","text":"<ul> <li>All workflow YAML files are in <code>.github/workflows/</code></li> <li>To add a new workflow, just copy an existing <code>.yml</code> file and edit as needed.</li> </ul>"},{"location":"uv-template/features/ci/github_actions/#configuration-and-secrets","title":"Configuration and secrets","text":"<ul> <li>No sensitive secrets are used by default in this template.</li> <li>For advanced scenarios (e.g., publishing, deploying), add secrets in GitHub repo settings and reference via <code>${{ secrets.YOUR_SECRET }}</code>.</li> </ul> <p>For more details, see the GitHub Actions Documentation.</p>"},{"location":"uv-template/features/code_quality/mypy/","title":"MyPy","text":"<p>Static type checker for Python, designed to ensure code correctness and catch type errors before runtime.</p>"},{"location":"uv-template/features/code_quality/mypy/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>type checking</code> Python code to catch type errors early</li> <li>enforcing and verifying type annotations</li> <li>checking code quality before every commit and during CI pipelines</li> </ul>"},{"location":"uv-template/features/code_quality/mypy/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make typecheck\n</code></pre> <pre><code>mypy --config-file=pyproject.toml ./src/\n</code></pre> <pre><code>uv run mypy --config-file=pyproject.toml ./src/\n</code></pre>"},{"location":"uv-template/features/code_quality/mypy/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use MyPy with pre-commit, you need to add the appropriate configuration to <code>.pre-commit-config.yaml</code>.</p> <p>!</p> Hook (by mypy)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.16.0\n  hooks:\n    - id: mypy\n      args: [ --config-file=pyproject.toml ]\n      files: ^src/\n</code></pre> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # check types\n    - id: mypy\n      name: Mypy\n      description: Run Mypy for type checking types in Python code\n      entry: uv run mypy\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config-file=pyproject.toml, ./src/ ]\n</code></pre>"},{"location":"uv-template/features/code_quality/mypy/#configuration","title":"Configuration","text":"<p>All configuration for Mypy in this template is located in pyproject.toml under the <code>[tool.mypy]</code> section.</p> <p>For more details on configuration, see the MyPy Documentation</p>"},{"location":"uv-template/features/code_quality/pytest/","title":"Pytest","text":"<p>A powerful framework for testing Python code, supporting both synchronous and asynchronous tests.</p>"},{"location":"uv-template/features/code_quality/pytest/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>unit testing</code> and <code>integration testing</code> of Python code</li> <li>testing both synchronous and asynchronous functions</li> <li>automated quality checks before every commit and in CI pipelines</li> </ul>"},{"location":"uv-template/features/code_quality/pytest/#important","title":"Important","text":"<p>!</p> <ul> <li>For testing asynchronous functions, the pytest-asyncio extension is added, which makes it easy to write and run async tests alongside regular ones.</li> </ul>"},{"location":"uv-template/features/code_quality/pytest/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make test\n</code></pre> <pre><code>pytest -v\n</code></pre> <pre><code>uv run pytest -v\n</code></pre>"},{"location":"uv-template/features/code_quality/pytest/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>Only a local hook is used for integration with pre-commit.</p> <p>Why?</p> <p>Pytest does not officially provide a pre-commit hook repository, and running tests often requires custom parameters or environments (for example, via uv or with specific options). A local hook gives maximum flexibility and control.</p> <p>!</p> Local hook (recommended) .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # Run pytest.\n    - id: pytest\n      name: pytest\n      entry: uv run pytest\n      language: system\n      types: [python]\n      pass_filenames: false\n      args: [ -v ]\n</code></pre>"},{"location":"uv-template/features/code_quality/pytest/#configuration","title":"Configuration","text":"<p>All configuration for Pytest (such as plugins) in this template is located in pyproject.toml under the <code>[tool.pytest.ini_options]</code> section.</p> <p>For more details on configuration, see the Pytest Documentation</p> <p>About async tests: pytest-asyncio documentation</p>"},{"location":"uv-template/features/code_quality/ruff/","title":"Ruff","text":"<p>An extremely fast Python linter and code formatter, written in Rust.</p>"},{"location":"uv-template/features/code_quality/ruff/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li><code>linting</code> Python code to enforce coding standards and catch potential errors</li> <li><code>formatting</code> Python code to ensure consistent style</li> <li>\u0441hecking code quality before every commit and during CI pipelines</li> </ul>"},{"location":"uv-template/features/code_quality/ruff/#how-to-use-it","title":"How to use it?","text":"<ul> <li>In this case, the Makefile does the same as running the commands directly via uv. The Makefile is only needed to shorten commands.</li> </ul> <p>!</p> MakefileManually (Without make and uv)Manually (With uv) <pre><code>make lint # lint your code\n\nmake format # format your code\n</code></pre> <pre><code>ruff check --config=pyproject.toml --fix ./src/\n</code></pre> <pre><code>ruff format --config=pyproject.toml ./src/\n</code></pre> <pre><code>uv run ruff check --config=pyproject.toml --fix ./src/\n</code></pre> <pre><code>uv run ruff format --config=pyproject.toml ./src/\n</code></pre>"},{"location":"uv-template/features/code_quality/ruff/#how-to-use-it-with-pre-commit","title":"How to use it with pre-commit?","text":"<p>To use Ruff with pre-commit, you need to add a configuration for it in your <code>.pre-commit-config.yaml</code> file.</p> <p>!</p> Hook (by ruff)Hook (your own) .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.11.12\n  hooks:\n    # Run the linter.\n    - id: ruff-check\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n\n    # Run the formatter.\n    - id: ruff-format\n      args: [ --config=pyproject.toml ]\n      files: ^src/\n</code></pre> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # lint code\n    - id: ruff\n      name: Ruff\n      description: Run Ruff for linting Python code\n      entry: uv run ruff check\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config=pyproject.toml, ./src/ ]\n\n    # format code\n    - id: ruff\n      name: Ruff\n      description: Run Ruff for formatting Python code\n      entry: uv run ruff format\n      types: [python]\n      language: system\n      always_run: true\n      pass_filenames: false\n      args: [ --config=pyproject.toml, ./src/ ]\n</code></pre>"},{"location":"uv-template/features/code_quality/ruff/#configuration","title":"Configuration","text":"<p>All configuration for Ruff in this template is located in pyproject.toml under the <code>[tool.ruff]</code> section.</p> <p>For more details on configuration, see the Ruff Documentation</p>"},{"location":"uv-template/features/code_quality/vermin/","title":"Vermin","text":"<p>A tool for determining the minimum Python version required to run your code, based on the syntax and standard libraries used.</p>"},{"location":"uv-template/features/code_quality/vermin/#what-is-it-used-for-here","title":"What is it used for here?","text":"<p>!</p> <ul> <li>analyzing the <code>minimal required Python version</code> for running your code</li> </ul>"},{"location":"uv-template/features/code_quality/vermin/#important","title":"Important","text":"<ul> <li>Vermin analyzes only your code's syntax and use of the standard library.</li> </ul> <p>!</p> <ul> <li>If you use external libraries that require newer Python versions, Vermin will not detect this. It does not check dependencies from requirements.txt or pyproject.toml.</li> <li>In this template, Vermin is used exclusively in CI via GitHub Actions to ensure code backward compatibility.</li> </ul>"},{"location":"uv-template/features/code_quality/vermin/#how-to-use-it","title":"How to use it?","text":"<ul> <li>There is no need to run Vermin manually or set it up locally \u2014 it is integrated into the CI workflow and runs automatically in GitHub Actions.</li> <li>But of course, you can run it locally directly in your terminal or using pre-commit hook.</li> </ul>"},{"location":"uv-template/features/code_quality/vermin/#examples","title":"Examples","text":"<p>!</p> Locally (terminal):Pre-commit hook:Github Actions: <pre><code>uv run vermin --eval-annotations --backport typing --no-parse-comments .\n</code></pre> <ul> <li><code>--eval-annotations</code> - evaluates type annotations to determine the minimum Python version.</li> <li><code>--backport typing</code> - backports the <code>typing</code> module to older Python versions.</li> <li><code>--no-parse-comments</code> - ignores comments in the code, focusing only on actual code syntax.</li> <li> <p><code>.</code> - specifies the current directory as the target for analysis.</p> </li> <li> <p>You can also specify a specific file or directory instead of <code>.</code> to analyze only that part of your codebase.</p> </li> </ul> .pre-commit-config.yaml<pre><code>- repo: local\n  hooks:\n    # Run Vermin.\n    - id: vermin\n      name: vermin\n      entry: uv run vermin .\n      language: system\n      types: [python]\n      pass_filenames: false\n      args: [ --eval-annotations, --backport typing, --no-parse-comments ]\n</code></pre> .github/workflows/compatibility.yml<pre><code>jobs:\n  compatibility:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.13\"\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install vermin\n      - name: Check minimal Python version\n        run: vermin --eval-annotations --backport typing --no-parse-comments .\n</code></pre>"},{"location":"uv-template/features/code_quality/vermin/#configuration","title":"Configuration","text":"<p>Vermin does not have its own configuration file \u2014 all parameters are set via the command line.</p> <p>For more details on configuration, see the Vermin Documentation</p>"},{"location":"uv-template/home/changelog/","title":"Changelog","text":""},{"location":"uv-template/home/changelog/#0100-2025-06-14","title":"0.10.0 (2025-06-14)","text":""},{"location":"uv-template/home/changelog/#feat","title":"Feat","text":"<ul> <li>add commands for doing commit and bumping version</li> <li>env.py: add checking if .env file exists or not</li> <li>devcontainer.json: add github cli to devcontainer</li> <li>add init command to setup project using one command</li> <li>add gitlab workflows</li> <li>add gitlab workflows</li> <li>remove github workflows</li> </ul>"},{"location":"uv-template/home/changelog/#fix","title":"Fix","text":"<ul> <li>remove themes</li> <li>Makefile: fix command to initialize project</li> <li>.pre-commit-config.yaml: fix running pytest</li> <li>fix syntax error</li> <li>restore github actions for main branch after merge</li> <li>set the correct app stage for dev image</li> <li>fix adding all env files to dev image</li> <li>fix command to run container and add logs command to check prod container logs</li> </ul>"},{"location":"uv-template/home/changelog/#090-2025-06-07","title":"0.9.0 (2025-06-07)","text":""},{"location":"uv-template/home/changelog/#feat_1","title":"Feat","text":"<ul> <li>add loading env variables based on app stage</li> </ul>"},{"location":"uv-template/home/changelog/#fix_1","title":"Fix","text":"<ul> <li>move getting correct path to env file to another variable</li> <li>fix name of workflow</li> </ul>"},{"location":"uv-template/home/changelog/#080-2025-06-05","title":"0.8.0 (2025-06-05)","text":""},{"location":"uv-template/home/changelog/#feat_2","title":"Feat","text":"<ul> <li>change workflow to check minimal python version to run code</li> </ul>"},{"location":"uv-template/home/changelog/#070-2025-06-04","title":"0.7.0 (2025-06-04)","text":""},{"location":"uv-template/home/changelog/#feat_3","title":"Feat","text":"<ul> <li>add workflow for testing on multiple Python versions</li> <li>add workflow for linting, type-checking and testing</li> </ul>"},{"location":"uv-template/home/changelog/#fix_2","title":"Fix","text":"<ul> <li>fix problem with running ruff linter</li> <li>fix problem with testing async functions</li> </ul>"},{"location":"uv-template/home/changelog/#060-2025-06-01","title":"0.6.0 (2025-06-01)","text":""},{"location":"uv-template/home/changelog/#feat_4","title":"Feat","text":"<ul> <li>add pytest and configure for testing sync/async functions</li> </ul>"},{"location":"uv-template/home/changelog/#050-2025-05-31","title":"0.5.0 (2025-05-31)","text":""},{"location":"uv-template/home/changelog/#feat_5","title":"Feat","text":"<ul> <li>update vscode profile for devcontainer</li> <li>add vscode profile to devcontainer configuration</li> <li>configure Dependabot for automated dependency updates and security checks</li> <li>setup .devcontainer for codespaces</li> </ul>"},{"location":"uv-template/home/changelog/#041-2025-05-31","title":"0.4.1 (2025-05-31)","text":""},{"location":"uv-template/home/changelog/#fix_3","title":"Fix","text":"<ul> <li>fix error calling entrypoint file inside container</li> </ul>"},{"location":"uv-template/home/changelog/#040-2025-05-31","title":"0.4.0 (2025-05-31)","text":""},{"location":"uv-template/home/changelog/#feat_6","title":"Feat","text":"<ul> <li>add makefile for simplifies running scripts and tasks</li> </ul>"},{"location":"uv-template/home/changelog/#031-2025-05-29","title":"0.3.1 (2025-05-29)","text":""},{"location":"uv-template/home/changelog/#fix_4","title":"Fix","text":"<ul> <li>fix pre-commit hooks</li> </ul>"},{"location":"uv-template/home/changelog/#030-2025-05-29","title":"0.3.0 (2025-05-29)","text":""},{"location":"uv-template/home/changelog/#feat_7","title":"Feat","text":"<ul> <li>add mkdocs --dev dependency for generating documentation</li> </ul>"},{"location":"uv-template/home/changelog/#020-2025-05-28","title":"0.2.0 (2025-05-28)","text":""},{"location":"uv-template/home/changelog/#feat_8","title":"Feat","text":"<ul> <li>add commitizen --dev dependency</li> <li>add pre-commit --dev dependency</li> <li>initial commit</li> </ul>"},{"location":"uv-template/home/contributing/","title":"Contributing Guide","text":"<p>Welcome! Thank you for your interest in improving python-boilerplate/uv-template. This project is my personal template, and only bug fixes are accepted.</p>"},{"location":"uv-template/home/contributing/#reporting-a-bug","title":"\ud83d\udc1e Reporting a Bug","text":"<p>Before submitting a bug report:</p> <ul> <li>Check that the issue hasn\u2019t already been reported in the Issues section.</li> </ul> <p>When reporting a bug, please include:</p> <ul> <li>Steps to reproduce the bug</li> <li>Expected vs actual behavior</li> <li>Any logs, error traces, or screenshots (if applicable)</li> <li>Details about your Python version, OS, and any relevant environment info</li> </ul> <p>Clear, detailed bug reports or feature descriptions help address problems faster.</p>"},{"location":"uv-template/home/contributing/#how-to-contribute-pull-request","title":"\ud83d\udd04 How to Contribute (Pull Request)","text":"<ol> <li>Fork this repository to your own GitHub account.</li> <li>Create a branch for your fix. Branch naming suggestion: <code>fix/short-bug-description</code></li> <li>Apply your changes on that branch (if it's a bug).</li> <li>Test your code:<ul> <li>Run the test suite: <pre><code>make test\n</code></pre></li> <li>Run the linter: <pre><code>make lint &amp;&amp; make format\n</code></pre></li> </ul> </li> <li>Describe your PR clearly and informatively.</li> <li>Open a Pull Request from your branch to this repository.</li> </ol>"},{"location":"uv-template/home/contributing/#code-requirements","title":"\u2705 Code Requirements","text":"<p>!</p> <ul> <li>Follow the existing code style.</li> <li>Make sure all tests pass (<code>pytest</code>) (if needed).</li> <li>Lint and Format your code with <code>ruff</code> before submitting (if needed).</li> <li>Do not add new features or change existing functionality without agreement.</li> </ul>"},{"location":"uv-template/home/contributing/#questions","title":"\u2753 Questions","text":"<p>!</p> <p>If you have questions about contributing, please open an issue or comment on an existing one.</p> <p>Thank you for helping make this template better!</p>"},{"location":"uv-template/home/license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Yurii | monok8i \ud83e\udd8b\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"uv-template/reference/project_structure/","title":"Project Structure","text":""},{"location":"uv-template/reference/project_structure/#structure","title":"Structure","text":"<p>Below is an overview of the key files and directories:</p> <p>!</p> Project Structure<pre><code>.\n\u251c\u2500\u2500 CHANGELOG.md               # Automatically generated changelog (Commitizen)\n\u251c\u2500\u2500 CONTRIBUTING.md            # Guidelines for contributing to the project\n\u251c\u2500\u2500 LICENSE                    # Project license (MIT)\n\u251c\u2500\u2500 Makefile                   # Task automation for common development workflows\n\u251c\u2500\u2500 README.md                  # Project overview, usage, and quickstart\n\u251c\u2500\u2500 __main__.py                # Main entrypoint for running the application\n\u251c\u2500\u2500 assets/                    # Static assets (images, icons, etc.)\n\u251c\u2500\u2500 dev.Dockerfile             # Dockerfile for fast local/dev environment with uv\n\u251c\u2500\u2500 dev.dockerignore           # Exclude files from dev Docker image build context\n\u251c\u2500\u2500 docker/                    # Docker-related files (volumes, configs, etc.)\n\u2502   \u2514\u2500\u2500 docker-entrypoint.sh   # Entrypoint script for Docker containers\n\u251c\u2500\u2500 docker-compose.yml         # Compose file for multi-container development\n\u251c\u2500\u2500 docs/                      # Documentation source files for MkDocs\n\u251c\u2500\u2500 example.env                # Example environment variables for configuration\n\u251c\u2500\u2500 mkdocs.yml                 # MkDocs configuration (site navigation, theme, etc.)\n\u251c\u2500\u2500 prod.Dockerfile            # Production-optimized Dockerfile\n\u251c\u2500\u2500 prod.dockerignore          # Exclude files from prod Docker image build context\n\u251c\u2500\u2500 pyproject.toml             # Project metadata and configuration (PEP 621, tool configs)\n\u251c\u2500\u2500 requirements-dev.txt       # [*] (Optional) Dev dependencies pin file (if used)\n\u251c\u2500\u2500 requirements.txt           # Locked, pinned dependencies (auto-generated by uv)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 env.py             # Environment/configuration loading (env file/vars)\n\u2502   \u251c\u2500\u2500 factory.py             # (Placeholder) for app/service factory setup\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 logging/\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u251c\u2500\u2500 config.py      # Logging configuration constants\n\u2502           \u2514\u2500\u2500 setup.py       # Logging setup function\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_func.py           # Example unit tests (sync &amp; async)\n</code></pre>"},{"location":"uv-template/reference/project_structure/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All configs of development and CI tools are defined in <code>pyproject.toml</code> (without <code>mkdocs</code> and <code>pre-commit</code>).</li> <li>Pre-commit, linting, type-checking, and tests are automated via Makefile and CI.</li> <li>Environment configuration is stage-based (development/production).</li> </ul>"},{"location":"uv-template/usage/","title":"Quickstart","text":"<p>This section describes how to get started with this project: how to clone or create your own copy, and how to launch the app in different ways (locally, with Docker, or in Codespaces).</p>"},{"location":"uv-template/usage/#how-to-get-the-project","title":"How to Get the Project","text":"<p>!</p> Option A: Use as a TemplateOption B: Clone Directly <p>If you want to start your own project based on this boilerplate, use GitHub\u2019s \u201cUse this template\u201d button:</p> <p>workflow</p> <ol> <li>Go to the repository page.</li> <li>Click Use this template (top right).</li> <li>Create a new repository under your GitHub account.</li> <li>Clone your new repository:     <pre><code>git clone https://github.com/&lt;your-username&gt;/&lt;your-new-repo&gt;.git\ncd &lt;your-new-repo&gt;\n</code></pre></li> </ol> <p>If you want to contribute here or just try the boilerplate as-is:</p> <p>workflow</p> <ol> <li>Go to the repository page.</li> <li>Click Code &gt; Download ZIP (or clone the repo).</li> <li>Extract the ZIP file (if used).</li> <li>Navigate into the project directory:     <pre><code>cd uv-template\n</code></pre></li> </ol>"},{"location":"uv-template/usage/#how-to-run-the-project","title":"How to Run the Project","text":"<p>!</p> Option 1: GitHub Codespaces / Dev Containers (Zero Setup)Option 2: Local Development (No Docker)Option 3: Local Development with Docker (Dev Environment)Option 4: Production Docker Image <p>workflow</p> <ol> <li>On GitHub, click Code &gt; Codespaces &gt; Create codespace on main.</li> <li>Or, open the project in VS Code with the Dev Containers extension.</li> <li>Choose \u201cReopen in Container\u201d when prompted.</li> <li>Wait while all dependencies and tools are installed automatically.</li> <li>You can now use all <code>make</code> commands, run the app, tests, etc.</li> </ol> <p>Requirements: Python 3.10+, uv (or pip if you know what you\u2019re doing).</p> <p>workflow</p> <ol> <li>Install uv (recommended):     <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></li> <li>Install dependencies &amp; set up pre-commit hooks:     <pre><code>make init\n</code></pre></li> <li>Run the app:     <pre><code>make run\n</code></pre></li> <li>Run tests, linter, formatter as needed:     <pre><code>make test\nmake lint\nmake format\n</code></pre></li> </ol> <p>Best for: Consistent dev environment, works anywhere Docker runs.</p> <p>workflow</p> <ol> <li>Build the development Docker image:     <pre><code>make dev-build\n</code></pre></li> <li>Start the dev container (in background):     <pre><code>make dev-up\n</code></pre></li> <li>Enter a shell in the container (if needed):     <pre><code>make dev-exec\n</code></pre></li> <li>View logs, stop, or remove the container as needed:     <pre><code>make dev-logs\nmake dev-stop\nmake dev-down\n</code></pre></li> </ol> <p>Dev Docker specifics</p> <ul> <li>Uses <code>dev.Dockerfile</code> and <code>dev.dockerignore</code><ul> <li>Before building it runs <code>cp dev.dockerignore .dockerignore</code> to specify files to ignore</li> </ul> </li> <li>Loads environment from <code>.env.development</code></li> <li>Supports hot reload and development tools</li> </ul> <p>Best for: Testing production-like runs or deployment.</p> <p>workflow</p> <ol> <li>Build the production image:     <pre><code>make prod-build\n</code></pre></li> <li>Run the production container:     <pre><code>make prod-run\n</code></pre></li> <li>Enter a shell in the container (if needed):     <pre><code>make prod-exec\n</code></pre></li> <li>Run container with <code>bash</code> or view logs:     <pre><code>make prod-bash # temporary, with .env.production and with --rm flag\nmake prod-logs\n</code></pre></li> </ol> <p>Prod Docker specifics</p> <ul> <li>Uses <code>prod.Dockerfile</code> and <code>prod.dockerignore</code><ul> <li>Before building it runs <code>cp prod.dockerignore .dockerignore</code> to specify files to ignore</li> </ul> </li> <li>Loads environment from <code>.env.production</code></li> <li>Optimized for minimal size and performance</li> </ul>"},{"location":"uv-template/usage/#useful-tips","title":"Useful Tips","text":"<ul> <li>All common tasks (init, test, lint, format, docs, etc.) are available as simple <code>make</code> commands.</li> <li>See docs/usage/commands.md for the full list.</li> <li>Environments and secrets are configured via <code>.env.*</code> files (see <code>.env.example</code>).</li> <li>The project is ready for CI/CD with GitHub Actions and GitLab CI out of the box.</li> </ul>"},{"location":"uv-template/usage/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you have permission errors with git hooks, run:   <pre><code>chmod +x .git/hooks/*\n</code></pre></li> <li>For Docker issues, ensure Docker is running and you have permissions (try <code>sudo</code> if needed).</li> <li>For Codespaces/Dev Containers, see the Dev Containers docs.</li> </ul>"},{"location":"uv-template/usage/#more-info","title":"More Info","text":"<ul> <li>See Features for detailed explanations of tools and setup.</li> <li>See Project Structure for a file/folder overview.</li> </ul>"},{"location":"uv-template/usage/commands/","title":"Makefile Commands","text":"<p>This template maximally automates working with the project using a <code>Makefile</code>. It allows you to perform all main actions with a single command, without remembering long utility options.</p> <p>!</p> <p>All commands are run as <code>make &lt;command&gt;</code> (for example, <code>make test</code>).</p>"},{"location":"uv-template/usage/commands/#quick-list","title":"Quick List","text":"<p>!</p> Makefile<pre><code>make init         # Initialize the project (install dependencies, set up pre-commit)\nmake run          # Run the application locally (without Docker)\nmake test         # Run tests\nmake lint         # Lint code (Ruff, autofix)\nmake format       # Format code (Ruff)\nmake typecheck    # Static type checking (MyPy)\nmake clean        # Clean caches (`__pycache__`, .mypy_cache, .ruff_cache, .pytest_cache)\nmake serve        # Start local documentation server (MkDocs)\n</code></pre>"},{"location":"uv-template/usage/commands/#local-development","title":"Local Development","text":"<ul> <li><code>make init</code>     Installs dependencies via uv and sets up pre-commit hooks.</li> <li><code>make run</code>     Runs the application (<code>__main__.py</code>) in the current environment.</li> <li><code>make test</code>     Runs all automated tests using [pytest].</li> <li><code>make lint</code>     Checks code style and applies autofix using [Ruff].</li> <li><code>make format</code>     Formats code according to Ruff settings.</li> <li><code>make typecheck</code>     Checks types using [MyPy].</li> <li><code>make clean</code>     Removes all tool caches.</li> </ul>"},{"location":"uv-template/usage/commands/#docker","title":"Docker:","text":""},{"location":"uv-template/usage/commands/#development","title":"Development","text":"<ul> <li><code>make dev-build</code>     Builds the dev Docker image based on <code>dev.Dockerfile</code>.</li> <li><code>make dev-up</code>     Runs the dev container in the background.</li> <li><code>make dev-stop</code>     Stops the dev container without removing it.</li> <li><code>make dev-down</code>     Stops and removes the dev container.</li> <li><code>make dev-logs</code>     Shows logs from the dev container.</li> <li><code>make dev-exec</code>     Opens a bash shell in the running dev container.</li> <li><code>make dev-bash</code>     Starts a new bash shell in the dev container (temporary, with .env.development).</li> </ul>"},{"location":"uv-template/usage/commands/#production","title":"Production","text":"<ul> <li><code>make prod-build</code>     Builds the production Docker image based on <code>prod.Dockerfile</code>.</li> <li><code>make prod-run</code>     Runs the production container in the background.</li> <li><code>make prod-exec</code>     Opens a bash shell in the running prod container.</li> <li><code>make prod-bash</code>     Starts a new bash shell in the prod container (temporary, with .env.production and with <code>--rm</code> flag).</li> <li><code>make prod-logs</code>     Shows logs from the prod container.</li> </ul>"},{"location":"uv-template/usage/commands/#gitrelease","title":"Git/Release","text":"<ul> <li><code>make commit</code>     Creates a commit using Commitizen (launches a wizard for conventional commits).</li> <li><code>make bump</code>     Bumps the project version and automatically updates <code>CHANGELOG.md</code> and <code>pyproject.toml</code> (Commitizen).</li> </ul>"},{"location":"uv-template/usage/commands/#documentation","title":"Documentation","text":"<ul> <li><code>make serve</code>     Starts a local documentation server (MkDocs).</li> </ul>"},{"location":"uv-template/usage/commands/#help","title":"Help","text":"<ul> <li><code>make help</code>     Outputs a list of all available commands and their short descriptions.</li> </ul>"},{"location":"uv-template/usage/commands/#common-makefile-shortcuts","title":"Common Makefile Shortcuts","text":"<p>!</p> <ul> <li><code>d</code> \u2014 shortcut for <code>docker</code></li> <li><code>dc</code> \u2014 shortcut for <code>docker compose</code></li> <li><code>ur</code> \u2014 shortcut for <code>uv run</code></li> </ul>"},{"location":"uv-template/usage/commands/#notes","title":"Notes","text":"<p>!</p> <ul> <li>All Makefile commands can be used in CI/CD, locally, or in a devcontainer.</li> <li>No other scripts or CLIs are needed: all main scenarios are automated via Makefile.</li> <li>All container parameters (such as environment variables) are defined in the corresponding <code>.env.*</code> files.</li> </ul> <p>For more details about used features, see the Features section in the documentation</p>"}]}